
Juego.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  000001fc  00000270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000029a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000987  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000072a  00000000  00000000  00000ccb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000034a  00000000  00000000  000013f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  00001740  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c2  00000000  00000000  000017a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001e5  00000000  00000000  00001b62  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001d47  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ef       	ldi	r30, 0xFC	; 252
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 32       	cpi	r26, 0x2A	; 42
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 75 00 	call	0xea	; 0xea <main>
  8e:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <UART_Init>:
#define BOTON_B PD3
#define BOTON_A PD2

void UART_Init(unsigned int baud) {
	// Configuración del baud rate
	unsigned int ubrr = F_CPU/16/baud-1;
  96:	9c 01       	movw	r18, r24
  98:	40 e0       	ldi	r20, 0x00	; 0
  9a:	50 e0       	ldi	r21, 0x00	; 0
  9c:	60 e4       	ldi	r22, 0x40	; 64
  9e:	72 e4       	ldi	r23, 0x42	; 66
  a0:	8f e0       	ldi	r24, 0x0F	; 15
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	0e 94 da 00 	call	0x1b4	; 0x1b4 <__udivmodsi4>
  a8:	21 50       	subi	r18, 0x01	; 1
  aa:	31 09       	sbc	r19, r1
	UBRR0H = (unsigned char)(ubrr>>8);
  ac:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
  b0:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	// Habilitar transmisión y recepción
	UCSR0B = (1<<TXEN0) | (1<<RXEN0);
  b4:	88 e1       	ldi	r24, 0x18	; 24
  b6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

	// Configuración de 8 bits de datos y 1 bit de parada
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);
  ba:	86 e0       	ldi	r24, 0x06	; 6
  bc:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  c0:	08 95       	ret

000000c2 <UART_Transmit>:
}

void UART_Transmit(char data) {
	// Esperar hasta que el buffer esté vacío
	while (!(UCSR0A & (1<<UDRE0)));
  c2:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  c6:	95 ff       	sbrs	r25, 5
  c8:	fc cf       	rjmp	.-8      	; 0xc2 <UART_Transmit>
	// Colocar el dato en el buffer y enviarlo
	UDR0 = data;
  ca:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  ce:	08 95       	ret

000000d0 <UART_Transmit_String>:
}

void UART_Transmit_String(const char* str) {
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	ec 01       	movw	r28, r24
	while (*str) {
  d6:	03 c0       	rjmp	.+6      	; 0xde <UART_Transmit_String+0xe>
		UART_Transmit(*str++);
  d8:	21 96       	adiw	r28, 0x01	; 1
  da:	0e 94 61 00 	call	0xc2	; 0xc2 <UART_Transmit>
	// Colocar el dato en el buffer y enviarlo
	UDR0 = data;
}

void UART_Transmit_String(const char* str) {
	while (*str) {
  de:	88 81       	ld	r24, Y
  e0:	81 11       	cpse	r24, r1
  e2:	fa cf       	rjmp	.-12     	; 0xd8 <UART_Transmit_String+0x8>
		UART_Transmit(*str++);
	}
}
  e4:	df 91       	pop	r29
  e6:	cf 91       	pop	r28
  e8:	08 95       	ret

000000ea <main>:

int main(void) {
	// Configurar los pines como entradas con pull-up activado
	DDRD &= ~(1<<BOTON_IZQUIERDA) & ~(1<<BOTON_DERECHA) & ~(1<<BOTON_ABAJO) &
  ea:	8a b1       	in	r24, 0x0a	; 10
  ec:	83 70       	andi	r24, 0x03	; 3
  ee:	8a b9       	out	0x0a, r24	; 10
	~(1<<BOTON_ARRIBA) & ~(1<<BOTON_B) & ~(1<<BOTON_A);
	PORTD |= (1<<BOTON_IZQUIERDA) | (1<<BOTON_DERECHA) | (1<<BOTON_ABAJO) |
  f0:	8b b1       	in	r24, 0x0b	; 11
  f2:	8c 6f       	ori	r24, 0xFC	; 252
  f4:	8b b9       	out	0x0b, r24	; 11
	(1<<BOTON_ARRIBA) | (1<<BOTON_B) | (1<<BOTON_A);

	// Inicializar UART a 9600 baud
	UART_Init(9600);
  f6:	80 e8       	ldi	r24, 0x80	; 128
  f8:	95 e2       	ldi	r25, 0x25	; 37
  fa:	0e 94 4b 00 	call	0x96	; 0x96 <UART_Init>

	while (1) {
		// Verificar cada botón y enviar la acción correspondiente
		if (!(PIND & (1<<BOTON_IZQUIERDA))) {
  fe:	4f 99       	sbic	0x09, 7	; 9
 100:	0d c0       	rjmp	.+26     	; 0x11c <main+0x32>
			UART_Transmit_String("Izquierda\n");
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	91 e0       	ldi	r25, 0x01	; 1
 106:	0e 94 68 00 	call	0xd0	; 0xd0 <UART_Transmit_String>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10a:	2f ef       	ldi	r18, 0xFF	; 255
 10c:	83 ec       	ldi	r24, 0xC3	; 195
 10e:	99 e0       	ldi	r25, 0x09	; 9
 110:	21 50       	subi	r18, 0x01	; 1
 112:	80 40       	sbci	r24, 0x00	; 0
 114:	90 40       	sbci	r25, 0x00	; 0
 116:	e1 f7       	brne	.-8      	; 0x110 <main+0x26>
 118:	00 c0       	rjmp	.+0      	; 0x11a <main+0x30>
 11a:	00 00       	nop
			_delay_ms(200); // Antirrebote
		}
		if (!(PIND & (1<<BOTON_DERECHA))) {
 11c:	4e 99       	sbic	0x09, 6	; 9
 11e:	0d c0       	rjmp	.+26     	; 0x13a <main+0x50>
			UART_Transmit_String("Derecha\n");
 120:	8b e0       	ldi	r24, 0x0B	; 11
 122:	91 e0       	ldi	r25, 0x01	; 1
 124:	0e 94 68 00 	call	0xd0	; 0xd0 <UART_Transmit_String>
 128:	2f ef       	ldi	r18, 0xFF	; 255
 12a:	83 ec       	ldi	r24, 0xC3	; 195
 12c:	99 e0       	ldi	r25, 0x09	; 9
 12e:	21 50       	subi	r18, 0x01	; 1
 130:	80 40       	sbci	r24, 0x00	; 0
 132:	90 40       	sbci	r25, 0x00	; 0
 134:	e1 f7       	brne	.-8      	; 0x12e <main+0x44>
 136:	00 c0       	rjmp	.+0      	; 0x138 <main+0x4e>
 138:	00 00       	nop
			_delay_ms(200); // Antirrebote
		}
		if (!(PIND & (1<<BOTON_ABAJO))) {
 13a:	4d 99       	sbic	0x09, 5	; 9
 13c:	0d c0       	rjmp	.+26     	; 0x158 <main+0x6e>
			UART_Transmit_String("Abajo\n");
 13e:	84 e1       	ldi	r24, 0x14	; 20
 140:	91 e0       	ldi	r25, 0x01	; 1
 142:	0e 94 68 00 	call	0xd0	; 0xd0 <UART_Transmit_String>
 146:	2f ef       	ldi	r18, 0xFF	; 255
 148:	83 ec       	ldi	r24, 0xC3	; 195
 14a:	99 e0       	ldi	r25, 0x09	; 9
 14c:	21 50       	subi	r18, 0x01	; 1
 14e:	80 40       	sbci	r24, 0x00	; 0
 150:	90 40       	sbci	r25, 0x00	; 0
 152:	e1 f7       	brne	.-8      	; 0x14c <main+0x62>
 154:	00 c0       	rjmp	.+0      	; 0x156 <main+0x6c>
 156:	00 00       	nop
			_delay_ms(200); // Antirrebote
		}
		if (!(PIND & (1<<BOTON_ARRIBA))) {
 158:	4c 99       	sbic	0x09, 4	; 9
 15a:	0d c0       	rjmp	.+26     	; 0x176 <main+0x8c>
			UART_Transmit_String("Arriba\n");
 15c:	8b e1       	ldi	r24, 0x1B	; 27
 15e:	91 e0       	ldi	r25, 0x01	; 1
 160:	0e 94 68 00 	call	0xd0	; 0xd0 <UART_Transmit_String>
 164:	2f ef       	ldi	r18, 0xFF	; 255
 166:	83 ec       	ldi	r24, 0xC3	; 195
 168:	99 e0       	ldi	r25, 0x09	; 9
 16a:	21 50       	subi	r18, 0x01	; 1
 16c:	80 40       	sbci	r24, 0x00	; 0
 16e:	90 40       	sbci	r25, 0x00	; 0
 170:	e1 f7       	brne	.-8      	; 0x16a <main+0x80>
 172:	00 c0       	rjmp	.+0      	; 0x174 <main+0x8a>
 174:	00 00       	nop
			_delay_ms(200); // Antirrebote
		}
		if (!(PIND & (1<<BOTON_B))) {
 176:	4b 99       	sbic	0x09, 3	; 9
 178:	0d c0       	rjmp	.+26     	; 0x194 <main+0xaa>
			UART_Transmit_String("X\n");
 17a:	83 e2       	ldi	r24, 0x23	; 35
 17c:	91 e0       	ldi	r25, 0x01	; 1
 17e:	0e 94 68 00 	call	0xd0	; 0xd0 <UART_Transmit_String>
 182:	2f ef       	ldi	r18, 0xFF	; 255
 184:	83 ec       	ldi	r24, 0xC3	; 195
 186:	99 e0       	ldi	r25, 0x09	; 9
 188:	21 50       	subi	r18, 0x01	; 1
 18a:	80 40       	sbci	r24, 0x00	; 0
 18c:	90 40       	sbci	r25, 0x00	; 0
 18e:	e1 f7       	brne	.-8      	; 0x188 <main+0x9e>
 190:	00 c0       	rjmp	.+0      	; 0x192 <main+0xa8>
 192:	00 00       	nop
			_delay_ms(200); // Antirrebote
		}
		if (!(PIND & (1<<BOTON_A))) {
 194:	4a 99       	sbic	0x09, 2	; 9
 196:	b3 cf       	rjmp	.-154    	; 0xfe <main+0x14>
			UART_Transmit_String("Y\n");
 198:	86 e2       	ldi	r24, 0x26	; 38
 19a:	91 e0       	ldi	r25, 0x01	; 1
 19c:	0e 94 68 00 	call	0xd0	; 0xd0 <UART_Transmit_String>
 1a0:	2f ef       	ldi	r18, 0xFF	; 255
 1a2:	83 ec       	ldi	r24, 0xC3	; 195
 1a4:	99 e0       	ldi	r25, 0x09	; 9
 1a6:	21 50       	subi	r18, 0x01	; 1
 1a8:	80 40       	sbci	r24, 0x00	; 0
 1aa:	90 40       	sbci	r25, 0x00	; 0
 1ac:	e1 f7       	brne	.-8      	; 0x1a6 <main+0xbc>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <main+0xc6>
 1b0:	00 00       	nop
 1b2:	a5 cf       	rjmp	.-182    	; 0xfe <main+0x14>

000001b4 <__udivmodsi4>:
 1b4:	a1 e2       	ldi	r26, 0x21	; 33
 1b6:	1a 2e       	mov	r1, r26
 1b8:	aa 1b       	sub	r26, r26
 1ba:	bb 1b       	sub	r27, r27
 1bc:	fd 01       	movw	r30, r26
 1be:	0d c0       	rjmp	.+26     	; 0x1da <__udivmodsi4_ep>

000001c0 <__udivmodsi4_loop>:
 1c0:	aa 1f       	adc	r26, r26
 1c2:	bb 1f       	adc	r27, r27
 1c4:	ee 1f       	adc	r30, r30
 1c6:	ff 1f       	adc	r31, r31
 1c8:	a2 17       	cp	r26, r18
 1ca:	b3 07       	cpc	r27, r19
 1cc:	e4 07       	cpc	r30, r20
 1ce:	f5 07       	cpc	r31, r21
 1d0:	20 f0       	brcs	.+8      	; 0x1da <__udivmodsi4_ep>
 1d2:	a2 1b       	sub	r26, r18
 1d4:	b3 0b       	sbc	r27, r19
 1d6:	e4 0b       	sbc	r30, r20
 1d8:	f5 0b       	sbc	r31, r21

000001da <__udivmodsi4_ep>:
 1da:	66 1f       	adc	r22, r22
 1dc:	77 1f       	adc	r23, r23
 1de:	88 1f       	adc	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	1a 94       	dec	r1
 1e4:	69 f7       	brne	.-38     	; 0x1c0 <__udivmodsi4_loop>
 1e6:	60 95       	com	r22
 1e8:	70 95       	com	r23
 1ea:	80 95       	com	r24
 1ec:	90 95       	com	r25
 1ee:	9b 01       	movw	r18, r22
 1f0:	ac 01       	movw	r20, r24
 1f2:	bd 01       	movw	r22, r26
 1f4:	cf 01       	movw	r24, r30
 1f6:	08 95       	ret

000001f8 <_exit>:
 1f8:	f8 94       	cli

000001fa <__stop_program>:
 1fa:	ff cf       	rjmp	.-2      	; 0x1fa <__stop_program>
