
ControlLab6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c64  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08002e28  08002e28  00003e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002eb4  08002eb4  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002eb4  08002eb4  00003eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002ebc  08002ebc  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ebc  08002ebc  00003ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002ec0  08002ec0  00003ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002ec4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  08002ed0  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08002ed0  000040c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008c78  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001802  00000000  00000000  0000ccb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000748  00000000  00000000  0000e4b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000593  00000000  00000000  0000ec00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020bca  00000000  00000000  0000f193  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009df8  00000000  00000000  0002fd5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7c27  00000000  00000000  00039b55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010177c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ccc  00000000  00000000  001017c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0010348c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002e10 	.word	0x08002e10

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002e10 	.word	0x08002e10

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/
  HAL_Init();  // Inicialización del HAL
 80004f8:	f000 fa7c 	bl	80009f4 <HAL_Init>
  SystemClock_Config();  // Configuración del reloj del sistema
 80004fc:	f000 f850 	bl	80005a0 <SystemClock_Config>
  MX_GPIO_Init();  // Inicialización de los GPIO
 8000500:	f000 f8b8 	bl	8000674 <MX_GPIO_Init>
  MX_USART1_UART_Init();  // Inicialización de UART1 para comunicación con Arduino
 8000504:	f000 f8e8 	bl	80006d8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();  // Inicialización de UART2 para comunicación con la terminal
 8000508:	f000 f910 	bl	800072c <MX_USART2_UART_Init>

  // Enviar mensaje de inicio a la terminal
  HAL_UART_Transmit(&huart2, (uint8_t*)"Iniciando comunicación UART...\n", 32, HAL_MAX_DELAY);
 800050c:	f04f 33ff 	mov.w	r3, #4294967295
 8000510:	2220      	movs	r2, #32
 8000512:	491b      	ldr	r1, [pc, #108]	@ (8000580 <main+0x8c>)
 8000514:	481b      	ldr	r0, [pc, #108]	@ (8000584 <main+0x90>)
 8000516:	f001 fc07 	bl	8001d28 <HAL_UART_Transmit>

  while (1)
  {
    HAL_UART_Transmit(&huart2, (uint8_t*)"Esperando datos de Arduino...\n", 32, HAL_MAX_DELAY);
 800051a:	f04f 33ff 	mov.w	r3, #4294967295
 800051e:	2220      	movs	r2, #32
 8000520:	4919      	ldr	r1, [pc, #100]	@ (8000588 <main+0x94>)
 8000522:	4818      	ldr	r0, [pc, #96]	@ (8000584 <main+0x90>)
 8000524:	f001 fc00 	bl	8001d28 <HAL_UART_Transmit>

    // Modificación: Aumentar el tiempo de espera a 5000 ms para asegurarse de que el Arduino envía los datos
    if (HAL_UART_Receive(&huart1, &received_char, 1, 5000) == HAL_OK)
 8000528:	f241 3388 	movw	r3, #5000	@ 0x1388
 800052c:	2201      	movs	r2, #1
 800052e:	4917      	ldr	r1, [pc, #92]	@ (800058c <main+0x98>)
 8000530:	4817      	ldr	r0, [pc, #92]	@ (8000590 <main+0x9c>)
 8000532:	f001 fc84 	bl	8001e3e <HAL_UART_Receive>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d115      	bne.n	8000568 <main+0x74>
    {
      HAL_UART_Transmit(&huart2, (uint8_t*)"Dato recibido: ", 15, HAL_MAX_DELAY);
 800053c:	f04f 33ff 	mov.w	r3, #4294967295
 8000540:	220f      	movs	r2, #15
 8000542:	4914      	ldr	r1, [pc, #80]	@ (8000594 <main+0xa0>)
 8000544:	480f      	ldr	r0, [pc, #60]	@ (8000584 <main+0x90>)
 8000546:	f001 fbef 	bl	8001d28 <HAL_UART_Transmit>
      HAL_UART_Transmit(&huart2, &received_char, 1, HAL_MAX_DELAY);
 800054a:	f04f 33ff 	mov.w	r3, #4294967295
 800054e:	2201      	movs	r2, #1
 8000550:	490e      	ldr	r1, [pc, #56]	@ (800058c <main+0x98>)
 8000552:	480c      	ldr	r0, [pc, #48]	@ (8000584 <main+0x90>)
 8000554:	f001 fbe8 	bl	8001d28 <HAL_UART_Transmit>
      HAL_UART_Transmit(&huart2, (uint8_t*)"\n", 1, HAL_MAX_DELAY);
 8000558:	f04f 33ff 	mov.w	r3, #4294967295
 800055c:	2201      	movs	r2, #1
 800055e:	490e      	ldr	r1, [pc, #56]	@ (8000598 <main+0xa4>)
 8000560:	4808      	ldr	r0, [pc, #32]	@ (8000584 <main+0x90>)
 8000562:	f001 fbe1 	bl	8001d28 <HAL_UART_Transmit>
 8000566:	e006      	b.n	8000576 <main+0x82>
    }
    else
    {
      HAL_UART_Transmit(&huart2, (uint8_t*)"No se recibieron datos...\n", 26, HAL_MAX_DELAY);
 8000568:	f04f 33ff 	mov.w	r3, #4294967295
 800056c:	221a      	movs	r2, #26
 800056e:	490b      	ldr	r1, [pc, #44]	@ (800059c <main+0xa8>)
 8000570:	4804      	ldr	r0, [pc, #16]	@ (8000584 <main+0x90>)
 8000572:	f001 fbd9 	bl	8001d28 <HAL_UART_Transmit>
    }

    HAL_Delay(500);  // Añadir un pequeño retardo para no saturar la terminal.
 8000576:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800057a:	f000 faad 	bl	8000ad8 <HAL_Delay>
    HAL_UART_Transmit(&huart2, (uint8_t*)"Esperando datos de Arduino...\n", 32, HAL_MAX_DELAY);
 800057e:	e7cc      	b.n	800051a <main+0x26>
 8000580:	08002e28 	.word	0x08002e28
 8000584:	20000070 	.word	0x20000070
 8000588:	08002e4c 	.word	0x08002e4c
 800058c:	200000b8 	.word	0x200000b8
 8000590:	20000028 	.word	0x20000028
 8000594:	08002e6c 	.word	0x08002e6c
 8000598:	08002e7c 	.word	0x08002e7c
 800059c:	08002e80 	.word	0x08002e80

080005a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b094      	sub	sp, #80	@ 0x50
 80005a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a6:	f107 031c 	add.w	r3, r7, #28
 80005aa:	2234      	movs	r2, #52	@ 0x34
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f002 fc02 	bl	8002db8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b4:	f107 0308 	add.w	r3, r7, #8
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c4:	2300      	movs	r3, #0
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	4b28      	ldr	r3, [pc, #160]	@ (800066c <SystemClock_Config+0xcc>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005cc:	4a27      	ldr	r2, [pc, #156]	@ (800066c <SystemClock_Config+0xcc>)
 80005ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80005d4:	4b25      	ldr	r3, [pc, #148]	@ (800066c <SystemClock_Config+0xcc>)
 80005d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e0:	2300      	movs	r3, #0
 80005e2:	603b      	str	r3, [r7, #0]
 80005e4:	4b22      	ldr	r3, [pc, #136]	@ (8000670 <SystemClock_Config+0xd0>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a21      	ldr	r2, [pc, #132]	@ (8000670 <SystemClock_Config+0xd0>)
 80005ea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005ee:	6013      	str	r3, [r2, #0]
 80005f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000670 <SystemClock_Config+0xd0>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005f8:	603b      	str	r3, [r7, #0]
 80005fa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005fc:	2302      	movs	r3, #2
 80005fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000600:	2301      	movs	r3, #1
 8000602:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000604:	2310      	movs	r3, #16
 8000606:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000608:	2302      	movs	r3, #2
 800060a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800060c:	2300      	movs	r3, #0
 800060e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000610:	2308      	movs	r3, #8
 8000612:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000614:	2348      	movs	r3, #72	@ 0x48
 8000616:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000618:	2302      	movs	r3, #2
 800061a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800061c:	2302      	movs	r3, #2
 800061e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000620:	f107 031c 	add.w	r3, r7, #28
 8000624:	4618      	mov	r0, r3
 8000626:	f001 f891 	bl	800174c <HAL_RCC_OscConfig>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000630:	f000 f8a6 	bl	8000780 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000634:	230f      	movs	r3, #15
 8000636:	60bb      	str	r3, [r7, #8]
                              | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000638:	2302      	movs	r3, #2
 800063a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000640:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000644:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000646:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800064a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800064c:	f107 0308 	add.w	r3, r7, #8
 8000650:	2102      	movs	r1, #2
 8000652:	4618      	mov	r0, r3
 8000654:	f000 fdb6 	bl	80011c4 <HAL_RCC_ClockConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800065e:	f000 f88f 	bl	8000780 <Error_Handler>
  }
}
 8000662:	bf00      	nop
 8000664:	3750      	adds	r7, #80	@ 0x50
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40023800 	.word	0x40023800
 8000670:	40007000 	.word	0x40007000

08000674 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000688:	2300      	movs	r3, #0
 800068a:	603b      	str	r3, [r7, #0]
 800068c:	4b10      	ldr	r3, [pc, #64]	@ (80006d0 <MX_GPIO_Init+0x5c>)
 800068e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000690:	4a0f      	ldr	r2, [pc, #60]	@ (80006d0 <MX_GPIO_Init+0x5c>)
 8000692:	f043 0301 	orr.w	r3, r3, #1
 8000696:	6313      	str	r3, [r2, #48]	@ 0x30
 8000698:	4b0d      	ldr	r3, [pc, #52]	@ (80006d0 <MX_GPIO_Init+0x5c>)
 800069a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069c:	f003 0301 	and.w	r3, r3, #1
 80006a0:	603b      	str	r3, [r7, #0]
 80006a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80006a4:	2200      	movs	r2, #0
 80006a6:	2120      	movs	r1, #32
 80006a8:	480a      	ldr	r0, [pc, #40]	@ (80006d4 <MX_GPIO_Init+0x60>)
 80006aa:	f000 fd71 	bl	8001190 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80006ae:	2320      	movs	r3, #32
 80006b0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b2:	2301      	movs	r3, #1
 80006b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ba:	2300      	movs	r3, #0
 80006bc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	4619      	mov	r1, r3
 80006c2:	4804      	ldr	r0, [pc, #16]	@ (80006d4 <MX_GPIO_Init+0x60>)
 80006c4:	f000 fbd0 	bl	8000e68 <HAL_GPIO_Init>
}
 80006c8:	bf00      	nop
 80006ca:	3718      	adds	r7, #24
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40020000 	.word	0x40020000

080006d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;  // Comunicación con Arduino
 80006dc:	4b11      	ldr	r3, [pc, #68]	@ (8000724 <MX_USART1_UART_Init+0x4c>)
 80006de:	4a12      	ldr	r2, [pc, #72]	@ (8000728 <MX_USART1_UART_Init+0x50>)
 80006e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80006e2:	4b10      	ldr	r3, [pc, #64]	@ (8000724 <MX_USART1_UART_Init+0x4c>)
 80006e4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80006e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000724 <MX_USART1_UART_Init+0x4c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000724 <MX_USART1_UART_Init+0x4c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000724 <MX_USART1_UART_Init+0x4c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006fc:	4b09      	ldr	r3, [pc, #36]	@ (8000724 <MX_USART1_UART_Init+0x4c>)
 80006fe:	220c      	movs	r2, #12
 8000700:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000702:	4b08      	ldr	r3, [pc, #32]	@ (8000724 <MX_USART1_UART_Init+0x4c>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <MX_USART1_UART_Init+0x4c>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800070e:	4805      	ldr	r0, [pc, #20]	@ (8000724 <MX_USART1_UART_Init+0x4c>)
 8000710:	f001 faba 	bl	8001c88 <HAL_UART_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800071a:	f000 f831 	bl	8000780 <Error_Handler>
  }
}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20000028 	.word	0x20000028
 8000728:	40011000 	.word	0x40011000

0800072c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;  // Comunicación con la terminal
 8000730:	4b11      	ldr	r3, [pc, #68]	@ (8000778 <MX_USART2_UART_Init+0x4c>)
 8000732:	4a12      	ldr	r2, [pc, #72]	@ (800077c <MX_USART2_UART_Init+0x50>)
 8000734:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000736:	4b10      	ldr	r3, [pc, #64]	@ (8000778 <MX_USART2_UART_Init+0x4c>)
 8000738:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800073c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800073e:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <MX_USART2_UART_Init+0x4c>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000744:	4b0c      	ldr	r3, [pc, #48]	@ (8000778 <MX_USART2_UART_Init+0x4c>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800074a:	4b0b      	ldr	r3, [pc, #44]	@ (8000778 <MX_USART2_UART_Init+0x4c>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000750:	4b09      	ldr	r3, [pc, #36]	@ (8000778 <MX_USART2_UART_Init+0x4c>)
 8000752:	220c      	movs	r2, #12
 8000754:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000756:	4b08      	ldr	r3, [pc, #32]	@ (8000778 <MX_USART2_UART_Init+0x4c>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800075c:	4b06      	ldr	r3, [pc, #24]	@ (8000778 <MX_USART2_UART_Init+0x4c>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000762:	4805      	ldr	r0, [pc, #20]	@ (8000778 <MX_USART2_UART_Init+0x4c>)
 8000764:	f001 fa90 	bl	8001c88 <HAL_UART_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800076e:	f000 f807 	bl	8000780 <Error_Handler>
  }
}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	20000070 	.word	0x20000070
 800077c:	40004400 	.word	0x40004400

08000780 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000784:	b672      	cpsid	i
}
 8000786:	bf00      	nop
  __disable_irq();
  while (1)
 8000788:	bf00      	nop
 800078a:	e7fd      	b.n	8000788 <Error_Handler+0x8>

0800078c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	4b10      	ldr	r3, [pc, #64]	@ (80007d8 <HAL_MspInit+0x4c>)
 8000798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800079a:	4a0f      	ldr	r2, [pc, #60]	@ (80007d8 <HAL_MspInit+0x4c>)
 800079c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80007a2:	4b0d      	ldr	r3, [pc, #52]	@ (80007d8 <HAL_MspInit+0x4c>)
 80007a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	603b      	str	r3, [r7, #0]
 80007b2:	4b09      	ldr	r3, [pc, #36]	@ (80007d8 <HAL_MspInit+0x4c>)
 80007b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b6:	4a08      	ldr	r2, [pc, #32]	@ (80007d8 <HAL_MspInit+0x4c>)
 80007b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80007be:	4b06      	ldr	r3, [pc, #24]	@ (80007d8 <HAL_MspInit+0x4c>)
 80007c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007c6:	603b      	str	r3, [r7, #0]
 80007c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ca:	bf00      	nop
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	40023800 	.word	0x40023800

080007dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08c      	sub	sp, #48	@ 0x30
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e4:	f107 031c 	add.w	r3, r7, #28
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a3a      	ldr	r2, [pc, #232]	@ (80008e4 <HAL_UART_MspInit+0x108>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d135      	bne.n	800086a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	61bb      	str	r3, [r7, #24]
 8000802:	4b39      	ldr	r3, [pc, #228]	@ (80008e8 <HAL_UART_MspInit+0x10c>)
 8000804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000806:	4a38      	ldr	r2, [pc, #224]	@ (80008e8 <HAL_UART_MspInit+0x10c>)
 8000808:	f043 0310 	orr.w	r3, r3, #16
 800080c:	6453      	str	r3, [r2, #68]	@ 0x44
 800080e:	4b36      	ldr	r3, [pc, #216]	@ (80008e8 <HAL_UART_MspInit+0x10c>)
 8000810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000812:	f003 0310 	and.w	r3, r3, #16
 8000816:	61bb      	str	r3, [r7, #24]
 8000818:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
 800081e:	4b32      	ldr	r3, [pc, #200]	@ (80008e8 <HAL_UART_MspInit+0x10c>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	4a31      	ldr	r2, [pc, #196]	@ (80008e8 <HAL_UART_MspInit+0x10c>)
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	6313      	str	r3, [r2, #48]	@ 0x30
 800082a:	4b2f      	ldr	r3, [pc, #188]	@ (80008e8 <HAL_UART_MspInit+0x10c>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	617b      	str	r3, [r7, #20]
 8000834:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000836:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800083a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083c:	2302      	movs	r3, #2
 800083e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000844:	2303      	movs	r3, #3
 8000846:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000848:	2307      	movs	r3, #7
 800084a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084c:	f107 031c 	add.w	r3, r7, #28
 8000850:	4619      	mov	r1, r3
 8000852:	4826      	ldr	r0, [pc, #152]	@ (80008ec <HAL_UART_MspInit+0x110>)
 8000854:	f000 fb08 	bl	8000e68 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000858:	2200      	movs	r2, #0
 800085a:	2100      	movs	r1, #0
 800085c:	2025      	movs	r0, #37	@ 0x25
 800085e:	f000 fa3a 	bl	8000cd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000862:	2025      	movs	r0, #37	@ 0x25
 8000864:	f000 fa53 	bl	8000d0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000868:	e038      	b.n	80008dc <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4a20      	ldr	r2, [pc, #128]	@ (80008f0 <HAL_UART_MspInit+0x114>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d133      	bne.n	80008dc <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000874:	2300      	movs	r3, #0
 8000876:	613b      	str	r3, [r7, #16]
 8000878:	4b1b      	ldr	r3, [pc, #108]	@ (80008e8 <HAL_UART_MspInit+0x10c>)
 800087a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087c:	4a1a      	ldr	r2, [pc, #104]	@ (80008e8 <HAL_UART_MspInit+0x10c>)
 800087e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000882:	6413      	str	r3, [r2, #64]	@ 0x40
 8000884:	4b18      	ldr	r3, [pc, #96]	@ (80008e8 <HAL_UART_MspInit+0x10c>)
 8000886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000888:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800088c:	613b      	str	r3, [r7, #16]
 800088e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000890:	2300      	movs	r3, #0
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	4b14      	ldr	r3, [pc, #80]	@ (80008e8 <HAL_UART_MspInit+0x10c>)
 8000896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000898:	4a13      	ldr	r2, [pc, #76]	@ (80008e8 <HAL_UART_MspInit+0x10c>)
 800089a:	f043 0301 	orr.w	r3, r3, #1
 800089e:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a0:	4b11      	ldr	r3, [pc, #68]	@ (80008e8 <HAL_UART_MspInit+0x10c>)
 80008a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a4:	f003 0301 	and.w	r3, r3, #1
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008ac:	230c      	movs	r3, #12
 80008ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b0:	2302      	movs	r3, #2
 80008b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b8:	2303      	movs	r3, #3
 80008ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008bc:	2307      	movs	r3, #7
 80008be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c0:	f107 031c 	add.w	r3, r7, #28
 80008c4:	4619      	mov	r1, r3
 80008c6:	4809      	ldr	r0, [pc, #36]	@ (80008ec <HAL_UART_MspInit+0x110>)
 80008c8:	f000 face 	bl	8000e68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80008cc:	2200      	movs	r2, #0
 80008ce:	2100      	movs	r1, #0
 80008d0:	2026      	movs	r0, #38	@ 0x26
 80008d2:	f000 fa00 	bl	8000cd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008d6:	2026      	movs	r0, #38	@ 0x26
 80008d8:	f000 fa19 	bl	8000d0e <HAL_NVIC_EnableIRQ>
}
 80008dc:	bf00      	nop
 80008de:	3730      	adds	r7, #48	@ 0x30
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40011000 	.word	0x40011000
 80008e8:	40023800 	.word	0x40023800
 80008ec:	40020000 	.word	0x40020000
 80008f0:	40004400 	.word	0x40004400

080008f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008f8:	bf00      	nop
 80008fa:	e7fd      	b.n	80008f8 <NMI_Handler+0x4>

080008fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000900:	bf00      	nop
 8000902:	e7fd      	b.n	8000900 <HardFault_Handler+0x4>

08000904 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000908:	bf00      	nop
 800090a:	e7fd      	b.n	8000908 <MemManage_Handler+0x4>

0800090c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000910:	bf00      	nop
 8000912:	e7fd      	b.n	8000910 <BusFault_Handler+0x4>

08000914 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000918:	bf00      	nop
 800091a:	e7fd      	b.n	8000918 <UsageFault_Handler+0x4>

0800091c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr

0800092a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr

08000938 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr

08000946 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000946:	b580      	push	{r7, lr}
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800094a:	f000 f8a5 	bl	8000a98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
	...

08000954 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000958:	4802      	ldr	r0, [pc, #8]	@ (8000964 <USART1_IRQHandler+0x10>)
 800095a:	f001 fb07 	bl	8001f6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000028 	.word	0x20000028

08000968 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800096c:	4802      	ldr	r0, [pc, #8]	@ (8000978 <USART2_IRQHandler+0x10>)
 800096e:	f001 fafd 	bl	8001f6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000070 	.word	0x20000070

0800097c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000980:	4b06      	ldr	r3, [pc, #24]	@ (800099c <SystemInit+0x20>)
 8000982:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000986:	4a05      	ldr	r2, [pc, #20]	@ (800099c <SystemInit+0x20>)
 8000988:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800098c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	e000ed00 	.word	0xe000ed00

080009a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80009a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009d8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80009a4:	f7ff ffea 	bl	800097c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009a8:	480c      	ldr	r0, [pc, #48]	@ (80009dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009aa:	490d      	ldr	r1, [pc, #52]	@ (80009e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009ac:	4a0d      	ldr	r2, [pc, #52]	@ (80009e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009b0:	e002      	b.n	80009b8 <LoopCopyDataInit>

080009b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009b6:	3304      	adds	r3, #4

080009b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009bc:	d3f9      	bcc.n	80009b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009be:	4a0a      	ldr	r2, [pc, #40]	@ (80009e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009c0:	4c0a      	ldr	r4, [pc, #40]	@ (80009ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80009c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009c4:	e001      	b.n	80009ca <LoopFillZerobss>

080009c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009c8:	3204      	adds	r2, #4

080009ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009cc:	d3fb      	bcc.n	80009c6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80009ce:	f002 f9fb 	bl	8002dc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009d2:	f7ff fd8f 	bl	80004f4 <main>
  bx  lr    
 80009d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009e0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009e4:	08002ec4 	.word	0x08002ec4
  ldr r2, =_sbss
 80009e8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009ec:	200000c0 	.word	0x200000c0

080009f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009f0:	e7fe      	b.n	80009f0 <ADC_IRQHandler>
	...

080009f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000a34 <HAL_Init+0x40>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000a34 <HAL_Init+0x40>)
 80009fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a04:	4b0b      	ldr	r3, [pc, #44]	@ (8000a34 <HAL_Init+0x40>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a0a      	ldr	r2, [pc, #40]	@ (8000a34 <HAL_Init+0x40>)
 8000a0a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a10:	4b08      	ldr	r3, [pc, #32]	@ (8000a34 <HAL_Init+0x40>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a07      	ldr	r2, [pc, #28]	@ (8000a34 <HAL_Init+0x40>)
 8000a16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a1c:	2003      	movs	r0, #3
 8000a1e:	f000 f94f 	bl	8000cc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a22:	200f      	movs	r0, #15
 8000a24:	f000 f808 	bl	8000a38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a28:	f7ff feb0 	bl	800078c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a2c:	2300      	movs	r3, #0
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40023c00 	.word	0x40023c00

08000a38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a40:	4b12      	ldr	r3, [pc, #72]	@ (8000a8c <HAL_InitTick+0x54>)
 8000a42:	681a      	ldr	r2, [r3, #0]
 8000a44:	4b12      	ldr	r3, [pc, #72]	@ (8000a90 <HAL_InitTick+0x58>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	4619      	mov	r1, r3
 8000a4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a56:	4618      	mov	r0, r3
 8000a58:	f000 f967 	bl	8000d2a <HAL_SYSTICK_Config>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a62:	2301      	movs	r3, #1
 8000a64:	e00e      	b.n	8000a84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2b0f      	cmp	r3, #15
 8000a6a:	d80a      	bhi.n	8000a82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	6879      	ldr	r1, [r7, #4]
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295
 8000a74:	f000 f92f 	bl	8000cd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a78:	4a06      	ldr	r2, [pc, #24]	@ (8000a94 <HAL_InitTick+0x5c>)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	e000      	b.n	8000a84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a82:	2301      	movs	r3, #1
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	20000000 	.word	0x20000000
 8000a90:	20000008 	.word	0x20000008
 8000a94:	20000004 	.word	0x20000004

08000a98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a9c:	4b06      	ldr	r3, [pc, #24]	@ (8000ab8 <HAL_IncTick+0x20>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	4b06      	ldr	r3, [pc, #24]	@ (8000abc <HAL_IncTick+0x24>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	4a04      	ldr	r2, [pc, #16]	@ (8000abc <HAL_IncTick+0x24>)
 8000aaa:	6013      	str	r3, [r2, #0]
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	20000008 	.word	0x20000008
 8000abc:	200000bc 	.word	0x200000bc

08000ac0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac4:	4b03      	ldr	r3, [pc, #12]	@ (8000ad4 <HAL_GetTick+0x14>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	200000bc 	.word	0x200000bc

08000ad8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ae0:	f7ff ffee 	bl	8000ac0 <HAL_GetTick>
 8000ae4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000af0:	d005      	beq.n	8000afe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000af2:	4b0a      	ldr	r3, [pc, #40]	@ (8000b1c <HAL_Delay+0x44>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	461a      	mov	r2, r3
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	4413      	add	r3, r2
 8000afc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000afe:	bf00      	nop
 8000b00:	f7ff ffde 	bl	8000ac0 <HAL_GetTick>
 8000b04:	4602      	mov	r2, r0
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	68fa      	ldr	r2, [r7, #12]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d8f7      	bhi.n	8000b00 <HAL_Delay+0x28>
  {
  }
}
 8000b10:	bf00      	nop
 8000b12:	bf00      	nop
 8000b14:	3710      	adds	r7, #16
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	20000008 	.word	0x20000008

08000b20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	f003 0307 	and.w	r3, r3, #7
 8000b2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b30:	4b0c      	ldr	r3, [pc, #48]	@ (8000b64 <__NVIC_SetPriorityGrouping+0x44>)
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b36:	68ba      	ldr	r2, [r7, #8]
 8000b38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b52:	4a04      	ldr	r2, [pc, #16]	@ (8000b64 <__NVIC_SetPriorityGrouping+0x44>)
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	60d3      	str	r3, [r2, #12]
}
 8000b58:	bf00      	nop
 8000b5a:	3714      	adds	r7, #20
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b6c:	4b04      	ldr	r3, [pc, #16]	@ (8000b80 <__NVIC_GetPriorityGrouping+0x18>)
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	0a1b      	lsrs	r3, r3, #8
 8000b72:	f003 0307 	and.w	r3, r3, #7
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	e000ed00 	.word	0xe000ed00

08000b84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	db0b      	blt.n	8000bae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	f003 021f 	and.w	r2, r3, #31
 8000b9c:	4907      	ldr	r1, [pc, #28]	@ (8000bbc <__NVIC_EnableIRQ+0x38>)
 8000b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba2:	095b      	lsrs	r3, r3, #5
 8000ba4:	2001      	movs	r0, #1
 8000ba6:	fa00 f202 	lsl.w	r2, r0, r2
 8000baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bae:	bf00      	nop
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	e000e100 	.word	0xe000e100

08000bc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	6039      	str	r1, [r7, #0]
 8000bca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	db0a      	blt.n	8000bea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	b2da      	uxtb	r2, r3
 8000bd8:	490c      	ldr	r1, [pc, #48]	@ (8000c0c <__NVIC_SetPriority+0x4c>)
 8000bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bde:	0112      	lsls	r2, r2, #4
 8000be0:	b2d2      	uxtb	r2, r2
 8000be2:	440b      	add	r3, r1
 8000be4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000be8:	e00a      	b.n	8000c00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	b2da      	uxtb	r2, r3
 8000bee:	4908      	ldr	r1, [pc, #32]	@ (8000c10 <__NVIC_SetPriority+0x50>)
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	f003 030f 	and.w	r3, r3, #15
 8000bf6:	3b04      	subs	r3, #4
 8000bf8:	0112      	lsls	r2, r2, #4
 8000bfa:	b2d2      	uxtb	r2, r2
 8000bfc:	440b      	add	r3, r1
 8000bfe:	761a      	strb	r2, [r3, #24]
}
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	e000e100 	.word	0xe000e100
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b089      	sub	sp, #36	@ 0x24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	f003 0307 	and.w	r3, r3, #7
 8000c26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c28:	69fb      	ldr	r3, [r7, #28]
 8000c2a:	f1c3 0307 	rsb	r3, r3, #7
 8000c2e:	2b04      	cmp	r3, #4
 8000c30:	bf28      	it	cs
 8000c32:	2304      	movcs	r3, #4
 8000c34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	3304      	adds	r3, #4
 8000c3a:	2b06      	cmp	r3, #6
 8000c3c:	d902      	bls.n	8000c44 <NVIC_EncodePriority+0x30>
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	3b03      	subs	r3, #3
 8000c42:	e000      	b.n	8000c46 <NVIC_EncodePriority+0x32>
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c48:	f04f 32ff 	mov.w	r2, #4294967295
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c52:	43da      	mvns	r2, r3
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	401a      	ands	r2, r3
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	fa01 f303 	lsl.w	r3, r1, r3
 8000c66:	43d9      	mvns	r1, r3
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c6c:	4313      	orrs	r3, r2
         );
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3724      	adds	r7, #36	@ 0x24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
	...

08000c7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	3b01      	subs	r3, #1
 8000c88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c8c:	d301      	bcc.n	8000c92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e00f      	b.n	8000cb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c92:	4a0a      	ldr	r2, [pc, #40]	@ (8000cbc <SysTick_Config+0x40>)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	3b01      	subs	r3, #1
 8000c98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c9a:	210f      	movs	r1, #15
 8000c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca0:	f7ff ff8e 	bl	8000bc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ca4:	4b05      	ldr	r3, [pc, #20]	@ (8000cbc <SysTick_Config+0x40>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000caa:	4b04      	ldr	r3, [pc, #16]	@ (8000cbc <SysTick_Config+0x40>)
 8000cac:	2207      	movs	r2, #7
 8000cae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cb0:	2300      	movs	r3, #0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	e000e010 	.word	0xe000e010

08000cc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f7ff ff29 	bl	8000b20 <__NVIC_SetPriorityGrouping>
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b086      	sub	sp, #24
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	4603      	mov	r3, r0
 8000cde:	60b9      	str	r1, [r7, #8]
 8000ce0:	607a      	str	r2, [r7, #4]
 8000ce2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ce8:	f7ff ff3e 	bl	8000b68 <__NVIC_GetPriorityGrouping>
 8000cec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	68b9      	ldr	r1, [r7, #8]
 8000cf2:	6978      	ldr	r0, [r7, #20]
 8000cf4:	f7ff ff8e 	bl	8000c14 <NVIC_EncodePriority>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cfe:	4611      	mov	r1, r2
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff ff5d 	bl	8000bc0 <__NVIC_SetPriority>
}
 8000d06:	bf00      	nop
 8000d08:	3718      	adds	r7, #24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b082      	sub	sp, #8
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	4603      	mov	r3, r0
 8000d16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff ff31 	bl	8000b84 <__NVIC_EnableIRQ>
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b082      	sub	sp, #8
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	f7ff ffa2 	bl	8000c7c <SysTick_Config>
 8000d38:	4603      	mov	r3, r0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b084      	sub	sp, #16
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d4e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000d50:	f7ff feb6 	bl	8000ac0 <HAL_GetTick>
 8000d54:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	2b02      	cmp	r3, #2
 8000d60:	d008      	beq.n	8000d74 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2280      	movs	r2, #128	@ 0x80
 8000d66:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000d70:	2301      	movs	r3, #1
 8000d72:	e052      	b.n	8000e1a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f022 0216 	bic.w	r2, r2, #22
 8000d82:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	695a      	ldr	r2, [r3, #20]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000d92:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d103      	bne.n	8000da4 <HAL_DMA_Abort+0x62>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d007      	beq.n	8000db4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f022 0208 	bic.w	r2, r2, #8
 8000db2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f022 0201 	bic.w	r2, r2, #1
 8000dc2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000dc4:	e013      	b.n	8000dee <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000dc6:	f7ff fe7b 	bl	8000ac0 <HAL_GetTick>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	1ad3      	subs	r3, r2, r3
 8000dd0:	2b05      	cmp	r3, #5
 8000dd2:	d90c      	bls.n	8000dee <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2220      	movs	r2, #32
 8000dd8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2203      	movs	r2, #3
 8000dde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2200      	movs	r2, #0
 8000de6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000dea:	2303      	movs	r3, #3
 8000dec:	e015      	b.n	8000e1a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f003 0301 	and.w	r3, r3, #1
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d1e4      	bne.n	8000dc6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000e00:	223f      	movs	r2, #63	@ 0x3f
 8000e02:	409a      	lsls	r2, r3
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2200      	movs	r2, #0
 8000e14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3710      	adds	r7, #16
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e22:	b480      	push	{r7}
 8000e24:	b083      	sub	sp, #12
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	2b02      	cmp	r3, #2
 8000e34:	d004      	beq.n	8000e40 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2280      	movs	r2, #128	@ 0x80
 8000e3a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	e00c      	b.n	8000e5a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2205      	movs	r2, #5
 8000e44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f022 0201 	bic.w	r2, r2, #1
 8000e56:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
	...

08000e68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b089      	sub	sp, #36	@ 0x24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e72:	2300      	movs	r3, #0
 8000e74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e76:	2300      	movs	r3, #0
 8000e78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61fb      	str	r3, [r7, #28]
 8000e82:	e165      	b.n	8001150 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e84:	2201      	movs	r2, #1
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	697a      	ldr	r2, [r7, #20]
 8000e94:	4013      	ands	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	f040 8154 	bne.w	800114a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f003 0303 	and.w	r3, r3, #3
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d005      	beq.n	8000eba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	d130      	bne.n	8000f1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	2203      	movs	r2, #3
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	68da      	ldr	r2, [r3, #12]
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	4013      	ands	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	091b      	lsrs	r3, r3, #4
 8000f06:	f003 0201 	and.w	r2, r3, #1
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f003 0303 	and.w	r3, r3, #3
 8000f24:	2b03      	cmp	r3, #3
 8000f26:	d017      	beq.n	8000f58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	2203      	movs	r2, #3
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	689a      	ldr	r2, [r3, #8]
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f003 0303 	and.w	r3, r3, #3
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d123      	bne.n	8000fac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	08da      	lsrs	r2, r3, #3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3208      	adds	r2, #8
 8000f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	f003 0307 	and.w	r3, r3, #7
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	220f      	movs	r2, #15
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	43db      	mvns	r3, r3
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4013      	ands	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	691a      	ldr	r2, [r3, #16]
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	f003 0307 	and.w	r3, r3, #7
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	08da      	lsrs	r2, r3, #3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	3208      	adds	r2, #8
 8000fa6:	69b9      	ldr	r1, [r7, #24]
 8000fa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	2203      	movs	r2, #3
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 0203 	and.w	r2, r3, #3
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	f000 80ae 	beq.w	800114a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	4b5d      	ldr	r3, [pc, #372]	@ (8001168 <HAL_GPIO_Init+0x300>)
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ff6:	4a5c      	ldr	r2, [pc, #368]	@ (8001168 <HAL_GPIO_Init+0x300>)
 8000ff8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ffc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ffe:	4b5a      	ldr	r3, [pc, #360]	@ (8001168 <HAL_GPIO_Init+0x300>)
 8001000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001002:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800100a:	4a58      	ldr	r2, [pc, #352]	@ (800116c <HAL_GPIO_Init+0x304>)
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	089b      	lsrs	r3, r3, #2
 8001010:	3302      	adds	r3, #2
 8001012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001016:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	f003 0303 	and.w	r3, r3, #3
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	220f      	movs	r2, #15
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43db      	mvns	r3, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4013      	ands	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a4f      	ldr	r2, [pc, #316]	@ (8001170 <HAL_GPIO_Init+0x308>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d025      	beq.n	8001082 <HAL_GPIO_Init+0x21a>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a4e      	ldr	r2, [pc, #312]	@ (8001174 <HAL_GPIO_Init+0x30c>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d01f      	beq.n	800107e <HAL_GPIO_Init+0x216>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a4d      	ldr	r2, [pc, #308]	@ (8001178 <HAL_GPIO_Init+0x310>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d019      	beq.n	800107a <HAL_GPIO_Init+0x212>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a4c      	ldr	r2, [pc, #304]	@ (800117c <HAL_GPIO_Init+0x314>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d013      	beq.n	8001076 <HAL_GPIO_Init+0x20e>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a4b      	ldr	r2, [pc, #300]	@ (8001180 <HAL_GPIO_Init+0x318>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d00d      	beq.n	8001072 <HAL_GPIO_Init+0x20a>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a4a      	ldr	r2, [pc, #296]	@ (8001184 <HAL_GPIO_Init+0x31c>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d007      	beq.n	800106e <HAL_GPIO_Init+0x206>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a49      	ldr	r2, [pc, #292]	@ (8001188 <HAL_GPIO_Init+0x320>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d101      	bne.n	800106a <HAL_GPIO_Init+0x202>
 8001066:	2306      	movs	r3, #6
 8001068:	e00c      	b.n	8001084 <HAL_GPIO_Init+0x21c>
 800106a:	2307      	movs	r3, #7
 800106c:	e00a      	b.n	8001084 <HAL_GPIO_Init+0x21c>
 800106e:	2305      	movs	r3, #5
 8001070:	e008      	b.n	8001084 <HAL_GPIO_Init+0x21c>
 8001072:	2304      	movs	r3, #4
 8001074:	e006      	b.n	8001084 <HAL_GPIO_Init+0x21c>
 8001076:	2303      	movs	r3, #3
 8001078:	e004      	b.n	8001084 <HAL_GPIO_Init+0x21c>
 800107a:	2302      	movs	r3, #2
 800107c:	e002      	b.n	8001084 <HAL_GPIO_Init+0x21c>
 800107e:	2301      	movs	r3, #1
 8001080:	e000      	b.n	8001084 <HAL_GPIO_Init+0x21c>
 8001082:	2300      	movs	r3, #0
 8001084:	69fa      	ldr	r2, [r7, #28]
 8001086:	f002 0203 	and.w	r2, r2, #3
 800108a:	0092      	lsls	r2, r2, #2
 800108c:	4093      	lsls	r3, r2
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	4313      	orrs	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001094:	4935      	ldr	r1, [pc, #212]	@ (800116c <HAL_GPIO_Init+0x304>)
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	089b      	lsrs	r3, r3, #2
 800109a:	3302      	adds	r3, #2
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010a2:	4b3a      	ldr	r3, [pc, #232]	@ (800118c <HAL_GPIO_Init+0x324>)
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	43db      	mvns	r3, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4013      	ands	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d003      	beq.n	80010c6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010c6:	4a31      	ldr	r2, [pc, #196]	@ (800118c <HAL_GPIO_Init+0x324>)
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010cc:	4b2f      	ldr	r3, [pc, #188]	@ (800118c <HAL_GPIO_Init+0x324>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	43db      	mvns	r3, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4013      	ands	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d003      	beq.n	80010f0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010f0:	4a26      	ldr	r2, [pc, #152]	@ (800118c <HAL_GPIO_Init+0x324>)
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010f6:	4b25      	ldr	r3, [pc, #148]	@ (800118c <HAL_GPIO_Init+0x324>)
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	43db      	mvns	r3, r3
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	4013      	ands	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d003      	beq.n	800111a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	4313      	orrs	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800111a:	4a1c      	ldr	r2, [pc, #112]	@ (800118c <HAL_GPIO_Init+0x324>)
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001120:	4b1a      	ldr	r3, [pc, #104]	@ (800118c <HAL_GPIO_Init+0x324>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	43db      	mvns	r3, r3
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4013      	ands	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001138:	2b00      	cmp	r3, #0
 800113a:	d003      	beq.n	8001144 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	4313      	orrs	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001144:	4a11      	ldr	r2, [pc, #68]	@ (800118c <HAL_GPIO_Init+0x324>)
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	3301      	adds	r3, #1
 800114e:	61fb      	str	r3, [r7, #28]
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	2b0f      	cmp	r3, #15
 8001154:	f67f ae96 	bls.w	8000e84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001158:	bf00      	nop
 800115a:	bf00      	nop
 800115c:	3724      	adds	r7, #36	@ 0x24
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	40023800 	.word	0x40023800
 800116c:	40013800 	.word	0x40013800
 8001170:	40020000 	.word	0x40020000
 8001174:	40020400 	.word	0x40020400
 8001178:	40020800 	.word	0x40020800
 800117c:	40020c00 	.word	0x40020c00
 8001180:	40021000 	.word	0x40021000
 8001184:	40021400 	.word	0x40021400
 8001188:	40021800 	.word	0x40021800
 800118c:	40013c00 	.word	0x40013c00

08001190 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	460b      	mov	r3, r1
 800119a:	807b      	strh	r3, [r7, #2]
 800119c:	4613      	mov	r3, r2
 800119e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011a0:	787b      	ldrb	r3, [r7, #1]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d003      	beq.n	80011ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011a6:	887a      	ldrh	r2, [r7, #2]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011ac:	e003      	b.n	80011b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011ae:	887b      	ldrh	r3, [r7, #2]
 80011b0:	041a      	lsls	r2, r3, #16
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	619a      	str	r2, [r3, #24]
}
 80011b6:	bf00      	nop
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
	...

080011c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d101      	bne.n	80011d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e0cc      	b.n	8001372 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011d8:	4b68      	ldr	r3, [pc, #416]	@ (800137c <HAL_RCC_ClockConfig+0x1b8>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 030f 	and.w	r3, r3, #15
 80011e0:	683a      	ldr	r2, [r7, #0]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d90c      	bls.n	8001200 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011e6:	4b65      	ldr	r3, [pc, #404]	@ (800137c <HAL_RCC_ClockConfig+0x1b8>)
 80011e8:	683a      	ldr	r2, [r7, #0]
 80011ea:	b2d2      	uxtb	r2, r2
 80011ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011ee:	4b63      	ldr	r3, [pc, #396]	@ (800137c <HAL_RCC_ClockConfig+0x1b8>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 030f 	and.w	r3, r3, #15
 80011f6:	683a      	ldr	r2, [r7, #0]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d001      	beq.n	8001200 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	e0b8      	b.n	8001372 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 0302 	and.w	r3, r3, #2
 8001208:	2b00      	cmp	r3, #0
 800120a:	d020      	beq.n	800124e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0304 	and.w	r3, r3, #4
 8001214:	2b00      	cmp	r3, #0
 8001216:	d005      	beq.n	8001224 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001218:	4b59      	ldr	r3, [pc, #356]	@ (8001380 <HAL_RCC_ClockConfig+0x1bc>)
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	4a58      	ldr	r2, [pc, #352]	@ (8001380 <HAL_RCC_ClockConfig+0x1bc>)
 800121e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001222:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 0308 	and.w	r3, r3, #8
 800122c:	2b00      	cmp	r3, #0
 800122e:	d005      	beq.n	800123c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001230:	4b53      	ldr	r3, [pc, #332]	@ (8001380 <HAL_RCC_ClockConfig+0x1bc>)
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	4a52      	ldr	r2, [pc, #328]	@ (8001380 <HAL_RCC_ClockConfig+0x1bc>)
 8001236:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800123a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800123c:	4b50      	ldr	r3, [pc, #320]	@ (8001380 <HAL_RCC_ClockConfig+0x1bc>)
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	494d      	ldr	r1, [pc, #308]	@ (8001380 <HAL_RCC_ClockConfig+0x1bc>)
 800124a:	4313      	orrs	r3, r2
 800124c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	2b00      	cmp	r3, #0
 8001258:	d044      	beq.n	80012e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	2b01      	cmp	r3, #1
 8001260:	d107      	bne.n	8001272 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001262:	4b47      	ldr	r3, [pc, #284]	@ (8001380 <HAL_RCC_ClockConfig+0x1bc>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d119      	bne.n	80012a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e07f      	b.n	8001372 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	2b02      	cmp	r3, #2
 8001278:	d003      	beq.n	8001282 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800127e:	2b03      	cmp	r3, #3
 8001280:	d107      	bne.n	8001292 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001282:	4b3f      	ldr	r3, [pc, #252]	@ (8001380 <HAL_RCC_ClockConfig+0x1bc>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d109      	bne.n	80012a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e06f      	b.n	8001372 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001292:	4b3b      	ldr	r3, [pc, #236]	@ (8001380 <HAL_RCC_ClockConfig+0x1bc>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	2b00      	cmp	r3, #0
 800129c:	d101      	bne.n	80012a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e067      	b.n	8001372 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012a2:	4b37      	ldr	r3, [pc, #220]	@ (8001380 <HAL_RCC_ClockConfig+0x1bc>)
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	f023 0203 	bic.w	r2, r3, #3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	4934      	ldr	r1, [pc, #208]	@ (8001380 <HAL_RCC_ClockConfig+0x1bc>)
 80012b0:	4313      	orrs	r3, r2
 80012b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012b4:	f7ff fc04 	bl	8000ac0 <HAL_GetTick>
 80012b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012ba:	e00a      	b.n	80012d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012bc:	f7ff fc00 	bl	8000ac0 <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d901      	bls.n	80012d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e04f      	b.n	8001372 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012d2:	4b2b      	ldr	r3, [pc, #172]	@ (8001380 <HAL_RCC_ClockConfig+0x1bc>)
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	f003 020c 	and.w	r2, r3, #12
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d1eb      	bne.n	80012bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012e4:	4b25      	ldr	r3, [pc, #148]	@ (800137c <HAL_RCC_ClockConfig+0x1b8>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 030f 	and.w	r3, r3, #15
 80012ec:	683a      	ldr	r2, [r7, #0]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d20c      	bcs.n	800130c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012f2:	4b22      	ldr	r3, [pc, #136]	@ (800137c <HAL_RCC_ClockConfig+0x1b8>)
 80012f4:	683a      	ldr	r2, [r7, #0]
 80012f6:	b2d2      	uxtb	r2, r2
 80012f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012fa:	4b20      	ldr	r3, [pc, #128]	@ (800137c <HAL_RCC_ClockConfig+0x1b8>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 030f 	and.w	r3, r3, #15
 8001302:	683a      	ldr	r2, [r7, #0]
 8001304:	429a      	cmp	r2, r3
 8001306:	d001      	beq.n	800130c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	e032      	b.n	8001372 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 0304 	and.w	r3, r3, #4
 8001314:	2b00      	cmp	r3, #0
 8001316:	d008      	beq.n	800132a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001318:	4b19      	ldr	r3, [pc, #100]	@ (8001380 <HAL_RCC_ClockConfig+0x1bc>)
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	4916      	ldr	r1, [pc, #88]	@ (8001380 <HAL_RCC_ClockConfig+0x1bc>)
 8001326:	4313      	orrs	r3, r2
 8001328:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0308 	and.w	r3, r3, #8
 8001332:	2b00      	cmp	r3, #0
 8001334:	d009      	beq.n	800134a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001336:	4b12      	ldr	r3, [pc, #72]	@ (8001380 <HAL_RCC_ClockConfig+0x1bc>)
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	691b      	ldr	r3, [r3, #16]
 8001342:	00db      	lsls	r3, r3, #3
 8001344:	490e      	ldr	r1, [pc, #56]	@ (8001380 <HAL_RCC_ClockConfig+0x1bc>)
 8001346:	4313      	orrs	r3, r2
 8001348:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800134a:	f000 f855 	bl	80013f8 <HAL_RCC_GetSysClockFreq>
 800134e:	4602      	mov	r2, r0
 8001350:	4b0b      	ldr	r3, [pc, #44]	@ (8001380 <HAL_RCC_ClockConfig+0x1bc>)
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	091b      	lsrs	r3, r3, #4
 8001356:	f003 030f 	and.w	r3, r3, #15
 800135a:	490a      	ldr	r1, [pc, #40]	@ (8001384 <HAL_RCC_ClockConfig+0x1c0>)
 800135c:	5ccb      	ldrb	r3, [r1, r3]
 800135e:	fa22 f303 	lsr.w	r3, r2, r3
 8001362:	4a09      	ldr	r2, [pc, #36]	@ (8001388 <HAL_RCC_ClockConfig+0x1c4>)
 8001364:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001366:	4b09      	ldr	r3, [pc, #36]	@ (800138c <HAL_RCC_ClockConfig+0x1c8>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff fb64 	bl	8000a38 <HAL_InitTick>

  return HAL_OK;
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40023c00 	.word	0x40023c00
 8001380:	40023800 	.word	0x40023800
 8001384:	08002e9c 	.word	0x08002e9c
 8001388:	20000000 	.word	0x20000000
 800138c:	20000004 	.word	0x20000004

08001390 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001394:	4b03      	ldr	r3, [pc, #12]	@ (80013a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001396:	681b      	ldr	r3, [r3, #0]
}
 8001398:	4618      	mov	r0, r3
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	20000000 	.word	0x20000000

080013a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80013ac:	f7ff fff0 	bl	8001390 <HAL_RCC_GetHCLKFreq>
 80013b0:	4602      	mov	r2, r0
 80013b2:	4b05      	ldr	r3, [pc, #20]	@ (80013c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	0a9b      	lsrs	r3, r3, #10
 80013b8:	f003 0307 	and.w	r3, r3, #7
 80013bc:	4903      	ldr	r1, [pc, #12]	@ (80013cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80013be:	5ccb      	ldrb	r3, [r1, r3]
 80013c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40023800 	.word	0x40023800
 80013cc:	08002eac 	.word	0x08002eac

080013d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80013d4:	f7ff ffdc 	bl	8001390 <HAL_RCC_GetHCLKFreq>
 80013d8:	4602      	mov	r2, r0
 80013da:	4b05      	ldr	r3, [pc, #20]	@ (80013f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	0b5b      	lsrs	r3, r3, #13
 80013e0:	f003 0307 	and.w	r3, r3, #7
 80013e4:	4903      	ldr	r1, [pc, #12]	@ (80013f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80013e6:	5ccb      	ldrb	r3, [r1, r3]
 80013e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40023800 	.word	0x40023800
 80013f4:	08002eac 	.word	0x08002eac

080013f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013fc:	b0a6      	sub	sp, #152	@ 0x98
 80013fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001400:	2300      	movs	r3, #0
 8001402:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8001406:	2300      	movs	r3, #0
 8001408:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 800140c:	2300      	movs	r3, #0
 800140e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8001412:	2300      	movs	r3, #0
 8001414:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8001418:	2300      	movs	r3, #0
 800141a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800141e:	4bc8      	ldr	r3, [pc, #800]	@ (8001740 <HAL_RCC_GetSysClockFreq+0x348>)
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	f003 030c 	and.w	r3, r3, #12
 8001426:	2b0c      	cmp	r3, #12
 8001428:	f200 817e 	bhi.w	8001728 <HAL_RCC_GetSysClockFreq+0x330>
 800142c:	a201      	add	r2, pc, #4	@ (adr r2, 8001434 <HAL_RCC_GetSysClockFreq+0x3c>)
 800142e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001432:	bf00      	nop
 8001434:	08001469 	.word	0x08001469
 8001438:	08001729 	.word	0x08001729
 800143c:	08001729 	.word	0x08001729
 8001440:	08001729 	.word	0x08001729
 8001444:	08001471 	.word	0x08001471
 8001448:	08001729 	.word	0x08001729
 800144c:	08001729 	.word	0x08001729
 8001450:	08001729 	.word	0x08001729
 8001454:	08001479 	.word	0x08001479
 8001458:	08001729 	.word	0x08001729
 800145c:	08001729 	.word	0x08001729
 8001460:	08001729 	.word	0x08001729
 8001464:	080015e3 	.word	0x080015e3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001468:	4bb6      	ldr	r3, [pc, #728]	@ (8001744 <HAL_RCC_GetSysClockFreq+0x34c>)
 800146a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800146e:	e15f      	b.n	8001730 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001470:	4bb5      	ldr	r3, [pc, #724]	@ (8001748 <HAL_RCC_GetSysClockFreq+0x350>)
 8001472:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001476:	e15b      	b.n	8001730 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001478:	4bb1      	ldr	r3, [pc, #708]	@ (8001740 <HAL_RCC_GetSysClockFreq+0x348>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001480:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001484:	4bae      	ldr	r3, [pc, #696]	@ (8001740 <HAL_RCC_GetSysClockFreq+0x348>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d031      	beq.n	80014f4 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001490:	4bab      	ldr	r3, [pc, #684]	@ (8001740 <HAL_RCC_GetSysClockFreq+0x348>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	099b      	lsrs	r3, r3, #6
 8001496:	2200      	movs	r2, #0
 8001498:	66bb      	str	r3, [r7, #104]	@ 0x68
 800149a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800149c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800149e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014a2:	663b      	str	r3, [r7, #96]	@ 0x60
 80014a4:	2300      	movs	r3, #0
 80014a6:	667b      	str	r3, [r7, #100]	@ 0x64
 80014a8:	4ba7      	ldr	r3, [pc, #668]	@ (8001748 <HAL_RCC_GetSysClockFreq+0x350>)
 80014aa:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80014ae:	462a      	mov	r2, r5
 80014b0:	fb03 f202 	mul.w	r2, r3, r2
 80014b4:	2300      	movs	r3, #0
 80014b6:	4621      	mov	r1, r4
 80014b8:	fb01 f303 	mul.w	r3, r1, r3
 80014bc:	4413      	add	r3, r2
 80014be:	4aa2      	ldr	r2, [pc, #648]	@ (8001748 <HAL_RCC_GetSysClockFreq+0x350>)
 80014c0:	4621      	mov	r1, r4
 80014c2:	fba1 1202 	umull	r1, r2, r1, r2
 80014c6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80014c8:	460a      	mov	r2, r1
 80014ca:	67ba      	str	r2, [r7, #120]	@ 0x78
 80014cc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80014ce:	4413      	add	r3, r2
 80014d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80014d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80014d6:	2200      	movs	r2, #0
 80014d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80014da:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80014dc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80014e0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80014e4:	f7fe fe8e 	bl	8000204 <__aeabi_uldivmod>
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	4613      	mov	r3, r2
 80014ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80014f2:	e064      	b.n	80015be <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014f4:	4b92      	ldr	r3, [pc, #584]	@ (8001740 <HAL_RCC_GetSysClockFreq+0x348>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	099b      	lsrs	r3, r3, #6
 80014fa:	2200      	movs	r2, #0
 80014fc:	653b      	str	r3, [r7, #80]	@ 0x50
 80014fe:	657a      	str	r2, [r7, #84]	@ 0x54
 8001500:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001506:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001508:	2300      	movs	r3, #0
 800150a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800150c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8001510:	4622      	mov	r2, r4
 8001512:	462b      	mov	r3, r5
 8001514:	f04f 0000 	mov.w	r0, #0
 8001518:	f04f 0100 	mov.w	r1, #0
 800151c:	0159      	lsls	r1, r3, #5
 800151e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001522:	0150      	lsls	r0, r2, #5
 8001524:	4602      	mov	r2, r0
 8001526:	460b      	mov	r3, r1
 8001528:	4621      	mov	r1, r4
 800152a:	1a51      	subs	r1, r2, r1
 800152c:	6139      	str	r1, [r7, #16]
 800152e:	4629      	mov	r1, r5
 8001530:	eb63 0301 	sbc.w	r3, r3, r1
 8001534:	617b      	str	r3, [r7, #20]
 8001536:	f04f 0200 	mov.w	r2, #0
 800153a:	f04f 0300 	mov.w	r3, #0
 800153e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001542:	4659      	mov	r1, fp
 8001544:	018b      	lsls	r3, r1, #6
 8001546:	4651      	mov	r1, sl
 8001548:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800154c:	4651      	mov	r1, sl
 800154e:	018a      	lsls	r2, r1, #6
 8001550:	4651      	mov	r1, sl
 8001552:	ebb2 0801 	subs.w	r8, r2, r1
 8001556:	4659      	mov	r1, fp
 8001558:	eb63 0901 	sbc.w	r9, r3, r1
 800155c:	f04f 0200 	mov.w	r2, #0
 8001560:	f04f 0300 	mov.w	r3, #0
 8001564:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001568:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800156c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001570:	4690      	mov	r8, r2
 8001572:	4699      	mov	r9, r3
 8001574:	4623      	mov	r3, r4
 8001576:	eb18 0303 	adds.w	r3, r8, r3
 800157a:	60bb      	str	r3, [r7, #8]
 800157c:	462b      	mov	r3, r5
 800157e:	eb49 0303 	adc.w	r3, r9, r3
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	f04f 0200 	mov.w	r2, #0
 8001588:	f04f 0300 	mov.w	r3, #0
 800158c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001590:	4629      	mov	r1, r5
 8001592:	028b      	lsls	r3, r1, #10
 8001594:	4621      	mov	r1, r4
 8001596:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800159a:	4621      	mov	r1, r4
 800159c:	028a      	lsls	r2, r1, #10
 800159e:	4610      	mov	r0, r2
 80015a0:	4619      	mov	r1, r3
 80015a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80015a6:	2200      	movs	r2, #0
 80015a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80015aa:	647a      	str	r2, [r7, #68]	@ 0x44
 80015ac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80015b0:	f7fe fe28 	bl	8000204 <__aeabi_uldivmod>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4613      	mov	r3, r2
 80015ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80015be:	4b60      	ldr	r3, [pc, #384]	@ (8001740 <HAL_RCC_GetSysClockFreq+0x348>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	0c1b      	lsrs	r3, r3, #16
 80015c4:	f003 0303 	and.w	r3, r3, #3
 80015c8:	3301      	adds	r3, #1
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 80015d0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80015d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80015d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80015dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80015e0:	e0a6      	b.n	8001730 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015e2:	4b57      	ldr	r3, [pc, #348]	@ (8001740 <HAL_RCC_GetSysClockFreq+0x348>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80015ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015ee:	4b54      	ldr	r3, [pc, #336]	@ (8001740 <HAL_RCC_GetSysClockFreq+0x348>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d02a      	beq.n	8001650 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015fa:	4b51      	ldr	r3, [pc, #324]	@ (8001740 <HAL_RCC_GetSysClockFreq+0x348>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	099b      	lsrs	r3, r3, #6
 8001600:	2200      	movs	r2, #0
 8001602:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001604:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001608:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800160c:	2100      	movs	r1, #0
 800160e:	4b4e      	ldr	r3, [pc, #312]	@ (8001748 <HAL_RCC_GetSysClockFreq+0x350>)
 8001610:	fb03 f201 	mul.w	r2, r3, r1
 8001614:	2300      	movs	r3, #0
 8001616:	fb00 f303 	mul.w	r3, r0, r3
 800161a:	4413      	add	r3, r2
 800161c:	4a4a      	ldr	r2, [pc, #296]	@ (8001748 <HAL_RCC_GetSysClockFreq+0x350>)
 800161e:	fba0 1202 	umull	r1, r2, r0, r2
 8001622:	677a      	str	r2, [r7, #116]	@ 0x74
 8001624:	460a      	mov	r2, r1
 8001626:	673a      	str	r2, [r7, #112]	@ 0x70
 8001628:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800162a:	4413      	add	r3, r2
 800162c:	677b      	str	r3, [r7, #116]	@ 0x74
 800162e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001632:	2200      	movs	r2, #0
 8001634:	633b      	str	r3, [r7, #48]	@ 0x30
 8001636:	637a      	str	r2, [r7, #52]	@ 0x34
 8001638:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800163c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001640:	f7fe fde0 	bl	8000204 <__aeabi_uldivmod>
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
 8001648:	4613      	mov	r3, r2
 800164a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800164e:	e05b      	b.n	8001708 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001650:	4b3b      	ldr	r3, [pc, #236]	@ (8001740 <HAL_RCC_GetSysClockFreq+0x348>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	099b      	lsrs	r3, r3, #6
 8001656:	2200      	movs	r2, #0
 8001658:	62bb      	str	r3, [r7, #40]	@ 0x28
 800165a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800165c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800165e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001662:	623b      	str	r3, [r7, #32]
 8001664:	2300      	movs	r3, #0
 8001666:	627b      	str	r3, [r7, #36]	@ 0x24
 8001668:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800166c:	4642      	mov	r2, r8
 800166e:	464b      	mov	r3, r9
 8001670:	f04f 0000 	mov.w	r0, #0
 8001674:	f04f 0100 	mov.w	r1, #0
 8001678:	0159      	lsls	r1, r3, #5
 800167a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800167e:	0150      	lsls	r0, r2, #5
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	4641      	mov	r1, r8
 8001686:	ebb2 0a01 	subs.w	sl, r2, r1
 800168a:	4649      	mov	r1, r9
 800168c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001690:	f04f 0200 	mov.w	r2, #0
 8001694:	f04f 0300 	mov.w	r3, #0
 8001698:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800169c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80016a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80016a4:	ebb2 040a 	subs.w	r4, r2, sl
 80016a8:	eb63 050b 	sbc.w	r5, r3, fp
 80016ac:	f04f 0200 	mov.w	r2, #0
 80016b0:	f04f 0300 	mov.w	r3, #0
 80016b4:	00eb      	lsls	r3, r5, #3
 80016b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80016ba:	00e2      	lsls	r2, r4, #3
 80016bc:	4614      	mov	r4, r2
 80016be:	461d      	mov	r5, r3
 80016c0:	4643      	mov	r3, r8
 80016c2:	18e3      	adds	r3, r4, r3
 80016c4:	603b      	str	r3, [r7, #0]
 80016c6:	464b      	mov	r3, r9
 80016c8:	eb45 0303 	adc.w	r3, r5, r3
 80016cc:	607b      	str	r3, [r7, #4]
 80016ce:	f04f 0200 	mov.w	r2, #0
 80016d2:	f04f 0300 	mov.w	r3, #0
 80016d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80016da:	4629      	mov	r1, r5
 80016dc:	028b      	lsls	r3, r1, #10
 80016de:	4621      	mov	r1, r4
 80016e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80016e4:	4621      	mov	r1, r4
 80016e6:	028a      	lsls	r2, r1, #10
 80016e8:	4610      	mov	r0, r2
 80016ea:	4619      	mov	r1, r3
 80016ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80016f0:	2200      	movs	r2, #0
 80016f2:	61bb      	str	r3, [r7, #24]
 80016f4:	61fa      	str	r2, [r7, #28]
 80016f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016fa:	f7fe fd83 	bl	8000204 <__aeabi_uldivmod>
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	4613      	mov	r3, r2
 8001704:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001708:	4b0d      	ldr	r3, [pc, #52]	@ (8001740 <HAL_RCC_GetSysClockFreq+0x348>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	0f1b      	lsrs	r3, r3, #28
 800170e:	f003 0307 	and.w	r3, r3, #7
 8001712:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8001716:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800171a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800171e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001722:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001726:	e003      	b.n	8001730 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001728:	4b06      	ldr	r3, [pc, #24]	@ (8001744 <HAL_RCC_GetSysClockFreq+0x34c>)
 800172a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800172e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001730:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8001734:	4618      	mov	r0, r3
 8001736:	3798      	adds	r7, #152	@ 0x98
 8001738:	46bd      	mov	sp, r7
 800173a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800173e:	bf00      	nop
 8001740:	40023800 	.word	0x40023800
 8001744:	00f42400 	.word	0x00f42400
 8001748:	017d7840 	.word	0x017d7840

0800174c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e28d      	b.n	8001c7a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	2b00      	cmp	r3, #0
 8001768:	f000 8083 	beq.w	8001872 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800176c:	4b94      	ldr	r3, [pc, #592]	@ (80019c0 <HAL_RCC_OscConfig+0x274>)
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f003 030c 	and.w	r3, r3, #12
 8001774:	2b04      	cmp	r3, #4
 8001776:	d019      	beq.n	80017ac <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001778:	4b91      	ldr	r3, [pc, #580]	@ (80019c0 <HAL_RCC_OscConfig+0x274>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f003 030c 	and.w	r3, r3, #12
        || \
 8001780:	2b08      	cmp	r3, #8
 8001782:	d106      	bne.n	8001792 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001784:	4b8e      	ldr	r3, [pc, #568]	@ (80019c0 <HAL_RCC_OscConfig+0x274>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800178c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001790:	d00c      	beq.n	80017ac <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001792:	4b8b      	ldr	r3, [pc, #556]	@ (80019c0 <HAL_RCC_OscConfig+0x274>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800179a:	2b0c      	cmp	r3, #12
 800179c:	d112      	bne.n	80017c4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800179e:	4b88      	ldr	r3, [pc, #544]	@ (80019c0 <HAL_RCC_OscConfig+0x274>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80017aa:	d10b      	bne.n	80017c4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ac:	4b84      	ldr	r3, [pc, #528]	@ (80019c0 <HAL_RCC_OscConfig+0x274>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d05b      	beq.n	8001870 <HAL_RCC_OscConfig+0x124>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d157      	bne.n	8001870 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e25a      	b.n	8001c7a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017cc:	d106      	bne.n	80017dc <HAL_RCC_OscConfig+0x90>
 80017ce:	4b7c      	ldr	r3, [pc, #496]	@ (80019c0 <HAL_RCC_OscConfig+0x274>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a7b      	ldr	r2, [pc, #492]	@ (80019c0 <HAL_RCC_OscConfig+0x274>)
 80017d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017d8:	6013      	str	r3, [r2, #0]
 80017da:	e01d      	b.n	8001818 <HAL_RCC_OscConfig+0xcc>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017e4:	d10c      	bne.n	8001800 <HAL_RCC_OscConfig+0xb4>
 80017e6:	4b76      	ldr	r3, [pc, #472]	@ (80019c0 <HAL_RCC_OscConfig+0x274>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a75      	ldr	r2, [pc, #468]	@ (80019c0 <HAL_RCC_OscConfig+0x274>)
 80017ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017f0:	6013      	str	r3, [r2, #0]
 80017f2:	4b73      	ldr	r3, [pc, #460]	@ (80019c0 <HAL_RCC_OscConfig+0x274>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a72      	ldr	r2, [pc, #456]	@ (80019c0 <HAL_RCC_OscConfig+0x274>)
 80017f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017fc:	6013      	str	r3, [r2, #0]
 80017fe:	e00b      	b.n	8001818 <HAL_RCC_OscConfig+0xcc>
 8001800:	4b6f      	ldr	r3, [pc, #444]	@ (80019c0 <HAL_RCC_OscConfig+0x274>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a6e      	ldr	r2, [pc, #440]	@ (80019c0 <HAL_RCC_OscConfig+0x274>)
 8001806:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800180a:	6013      	str	r3, [r2, #0]
 800180c:	4b6c      	ldr	r3, [pc, #432]	@ (80019c0 <HAL_RCC_OscConfig+0x274>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a6b      	ldr	r2, [pc, #428]	@ (80019c0 <HAL_RCC_OscConfig+0x274>)
 8001812:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001816:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d013      	beq.n	8001848 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001820:	f7ff f94e 	bl	8000ac0 <HAL_GetTick>
 8001824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001826:	e008      	b.n	800183a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001828:	f7ff f94a 	bl	8000ac0 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b64      	cmp	r3, #100	@ 0x64
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e21f      	b.n	8001c7a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800183a:	4b61      	ldr	r3, [pc, #388]	@ (80019c0 <HAL_RCC_OscConfig+0x274>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d0f0      	beq.n	8001828 <HAL_RCC_OscConfig+0xdc>
 8001846:	e014      	b.n	8001872 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001848:	f7ff f93a 	bl	8000ac0 <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001850:	f7ff f936 	bl	8000ac0 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b64      	cmp	r3, #100	@ 0x64
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e20b      	b.n	8001c7a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001862:	4b57      	ldr	r3, [pc, #348]	@ (80019c0 <HAL_RCC_OscConfig+0x274>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1f0      	bne.n	8001850 <HAL_RCC_OscConfig+0x104>
 800186e:	e000      	b.n	8001872 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001870:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d06f      	beq.n	800195e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800187e:	4b50      	ldr	r3, [pc, #320]	@ (80019c0 <HAL_RCC_OscConfig+0x274>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f003 030c 	and.w	r3, r3, #12
 8001886:	2b00      	cmp	r3, #0
 8001888:	d017      	beq.n	80018ba <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800188a:	4b4d      	ldr	r3, [pc, #308]	@ (80019c0 <HAL_RCC_OscConfig+0x274>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f003 030c 	and.w	r3, r3, #12
        || \
 8001892:	2b08      	cmp	r3, #8
 8001894:	d105      	bne.n	80018a2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001896:	4b4a      	ldr	r3, [pc, #296]	@ (80019c0 <HAL_RCC_OscConfig+0x274>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d00b      	beq.n	80018ba <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018a2:	4b47      	ldr	r3, [pc, #284]	@ (80019c0 <HAL_RCC_OscConfig+0x274>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80018aa:	2b0c      	cmp	r3, #12
 80018ac:	d11c      	bne.n	80018e8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018ae:	4b44      	ldr	r3, [pc, #272]	@ (80019c0 <HAL_RCC_OscConfig+0x274>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d116      	bne.n	80018e8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ba:	4b41      	ldr	r3, [pc, #260]	@ (80019c0 <HAL_RCC_OscConfig+0x274>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d005      	beq.n	80018d2 <HAL_RCC_OscConfig+0x186>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d001      	beq.n	80018d2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e1d3      	b.n	8001c7a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d2:	4b3b      	ldr	r3, [pc, #236]	@ (80019c0 <HAL_RCC_OscConfig+0x274>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	00db      	lsls	r3, r3, #3
 80018e0:	4937      	ldr	r1, [pc, #220]	@ (80019c0 <HAL_RCC_OscConfig+0x274>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018e6:	e03a      	b.n	800195e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d020      	beq.n	8001932 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018f0:	4b34      	ldr	r3, [pc, #208]	@ (80019c4 <HAL_RCC_OscConfig+0x278>)
 80018f2:	2201      	movs	r2, #1
 80018f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f6:	f7ff f8e3 	bl	8000ac0 <HAL_GetTick>
 80018fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018fc:	e008      	b.n	8001910 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018fe:	f7ff f8df 	bl	8000ac0 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e1b4      	b.n	8001c7a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001910:	4b2b      	ldr	r3, [pc, #172]	@ (80019c0 <HAL_RCC_OscConfig+0x274>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0302 	and.w	r3, r3, #2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d0f0      	beq.n	80018fe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800191c:	4b28      	ldr	r3, [pc, #160]	@ (80019c0 <HAL_RCC_OscConfig+0x274>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	691b      	ldr	r3, [r3, #16]
 8001928:	00db      	lsls	r3, r3, #3
 800192a:	4925      	ldr	r1, [pc, #148]	@ (80019c0 <HAL_RCC_OscConfig+0x274>)
 800192c:	4313      	orrs	r3, r2
 800192e:	600b      	str	r3, [r1, #0]
 8001930:	e015      	b.n	800195e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001932:	4b24      	ldr	r3, [pc, #144]	@ (80019c4 <HAL_RCC_OscConfig+0x278>)
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001938:	f7ff f8c2 	bl	8000ac0 <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800193e:	e008      	b.n	8001952 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001940:	f7ff f8be 	bl	8000ac0 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b02      	cmp	r3, #2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e193      	b.n	8001c7a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001952:	4b1b      	ldr	r3, [pc, #108]	@ (80019c0 <HAL_RCC_OscConfig+0x274>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1f0      	bne.n	8001940 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0308 	and.w	r3, r3, #8
 8001966:	2b00      	cmp	r3, #0
 8001968:	d036      	beq.n	80019d8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	695b      	ldr	r3, [r3, #20]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d016      	beq.n	80019a0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001972:	4b15      	ldr	r3, [pc, #84]	@ (80019c8 <HAL_RCC_OscConfig+0x27c>)
 8001974:	2201      	movs	r2, #1
 8001976:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001978:	f7ff f8a2 	bl	8000ac0 <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001980:	f7ff f89e 	bl	8000ac0 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e173      	b.n	8001c7a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001992:	4b0b      	ldr	r3, [pc, #44]	@ (80019c0 <HAL_RCC_OscConfig+0x274>)
 8001994:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d0f0      	beq.n	8001980 <HAL_RCC_OscConfig+0x234>
 800199e:	e01b      	b.n	80019d8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019a0:	4b09      	ldr	r3, [pc, #36]	@ (80019c8 <HAL_RCC_OscConfig+0x27c>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019a6:	f7ff f88b 	bl	8000ac0 <HAL_GetTick>
 80019aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019ac:	e00e      	b.n	80019cc <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019ae:	f7ff f887 	bl	8000ac0 <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d907      	bls.n	80019cc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e15c      	b.n	8001c7a <HAL_RCC_OscConfig+0x52e>
 80019c0:	40023800 	.word	0x40023800
 80019c4:	42470000 	.word	0x42470000
 80019c8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019cc:	4b8a      	ldr	r3, [pc, #552]	@ (8001bf8 <HAL_RCC_OscConfig+0x4ac>)
 80019ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d1ea      	bne.n	80019ae <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0304 	and.w	r3, r3, #4
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	f000 8097 	beq.w	8001b14 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019e6:	2300      	movs	r3, #0
 80019e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019ea:	4b83      	ldr	r3, [pc, #524]	@ (8001bf8 <HAL_RCC_OscConfig+0x4ac>)
 80019ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d10f      	bne.n	8001a16 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	60bb      	str	r3, [r7, #8]
 80019fa:	4b7f      	ldr	r3, [pc, #508]	@ (8001bf8 <HAL_RCC_OscConfig+0x4ac>)
 80019fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fe:	4a7e      	ldr	r2, [pc, #504]	@ (8001bf8 <HAL_RCC_OscConfig+0x4ac>)
 8001a00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a04:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a06:	4b7c      	ldr	r3, [pc, #496]	@ (8001bf8 <HAL_RCC_OscConfig+0x4ac>)
 8001a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a0e:	60bb      	str	r3, [r7, #8]
 8001a10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a12:	2301      	movs	r3, #1
 8001a14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a16:	4b79      	ldr	r3, [pc, #484]	@ (8001bfc <HAL_RCC_OscConfig+0x4b0>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d118      	bne.n	8001a54 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a22:	4b76      	ldr	r3, [pc, #472]	@ (8001bfc <HAL_RCC_OscConfig+0x4b0>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a75      	ldr	r2, [pc, #468]	@ (8001bfc <HAL_RCC_OscConfig+0x4b0>)
 8001a28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a2e:	f7ff f847 	bl	8000ac0 <HAL_GetTick>
 8001a32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a34:	e008      	b.n	8001a48 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a36:	f7ff f843 	bl	8000ac0 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e118      	b.n	8001c7a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a48:	4b6c      	ldr	r3, [pc, #432]	@ (8001bfc <HAL_RCC_OscConfig+0x4b0>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d0f0      	beq.n	8001a36 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d106      	bne.n	8001a6a <HAL_RCC_OscConfig+0x31e>
 8001a5c:	4b66      	ldr	r3, [pc, #408]	@ (8001bf8 <HAL_RCC_OscConfig+0x4ac>)
 8001a5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a60:	4a65      	ldr	r2, [pc, #404]	@ (8001bf8 <HAL_RCC_OscConfig+0x4ac>)
 8001a62:	f043 0301 	orr.w	r3, r3, #1
 8001a66:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a68:	e01c      	b.n	8001aa4 <HAL_RCC_OscConfig+0x358>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	2b05      	cmp	r3, #5
 8001a70:	d10c      	bne.n	8001a8c <HAL_RCC_OscConfig+0x340>
 8001a72:	4b61      	ldr	r3, [pc, #388]	@ (8001bf8 <HAL_RCC_OscConfig+0x4ac>)
 8001a74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a76:	4a60      	ldr	r2, [pc, #384]	@ (8001bf8 <HAL_RCC_OscConfig+0x4ac>)
 8001a78:	f043 0304 	orr.w	r3, r3, #4
 8001a7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a7e:	4b5e      	ldr	r3, [pc, #376]	@ (8001bf8 <HAL_RCC_OscConfig+0x4ac>)
 8001a80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a82:	4a5d      	ldr	r2, [pc, #372]	@ (8001bf8 <HAL_RCC_OscConfig+0x4ac>)
 8001a84:	f043 0301 	orr.w	r3, r3, #1
 8001a88:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a8a:	e00b      	b.n	8001aa4 <HAL_RCC_OscConfig+0x358>
 8001a8c:	4b5a      	ldr	r3, [pc, #360]	@ (8001bf8 <HAL_RCC_OscConfig+0x4ac>)
 8001a8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a90:	4a59      	ldr	r2, [pc, #356]	@ (8001bf8 <HAL_RCC_OscConfig+0x4ac>)
 8001a92:	f023 0301 	bic.w	r3, r3, #1
 8001a96:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a98:	4b57      	ldr	r3, [pc, #348]	@ (8001bf8 <HAL_RCC_OscConfig+0x4ac>)
 8001a9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a9c:	4a56      	ldr	r2, [pc, #344]	@ (8001bf8 <HAL_RCC_OscConfig+0x4ac>)
 8001a9e:	f023 0304 	bic.w	r3, r3, #4
 8001aa2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d015      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aac:	f7ff f808 	bl	8000ac0 <HAL_GetTick>
 8001ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ab2:	e00a      	b.n	8001aca <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ab4:	f7ff f804 	bl	8000ac0 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e0d7      	b.n	8001c7a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aca:	4b4b      	ldr	r3, [pc, #300]	@ (8001bf8 <HAL_RCC_OscConfig+0x4ac>)
 8001acc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d0ee      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x368>
 8001ad6:	e014      	b.n	8001b02 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad8:	f7fe fff2 	bl	8000ac0 <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ade:	e00a      	b.n	8001af6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ae0:	f7fe ffee 	bl	8000ac0 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e0c1      	b.n	8001c7a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001af6:	4b40      	ldr	r3, [pc, #256]	@ (8001bf8 <HAL_RCC_OscConfig+0x4ac>)
 8001af8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d1ee      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b02:	7dfb      	ldrb	r3, [r7, #23]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d105      	bne.n	8001b14 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b08:	4b3b      	ldr	r3, [pc, #236]	@ (8001bf8 <HAL_RCC_OscConfig+0x4ac>)
 8001b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0c:	4a3a      	ldr	r2, [pc, #232]	@ (8001bf8 <HAL_RCC_OscConfig+0x4ac>)
 8001b0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b12:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	f000 80ad 	beq.w	8001c78 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b1e:	4b36      	ldr	r3, [pc, #216]	@ (8001bf8 <HAL_RCC_OscConfig+0x4ac>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f003 030c 	and.w	r3, r3, #12
 8001b26:	2b08      	cmp	r3, #8
 8001b28:	d060      	beq.n	8001bec <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	699b      	ldr	r3, [r3, #24]
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d145      	bne.n	8001bbe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b32:	4b33      	ldr	r3, [pc, #204]	@ (8001c00 <HAL_RCC_OscConfig+0x4b4>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b38:	f7fe ffc2 	bl	8000ac0 <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b3e:	e008      	b.n	8001b52 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b40:	f7fe ffbe 	bl	8000ac0 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e093      	b.n	8001c7a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b52:	4b29      	ldr	r3, [pc, #164]	@ (8001bf8 <HAL_RCC_OscConfig+0x4ac>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1f0      	bne.n	8001b40 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	69da      	ldr	r2, [r3, #28]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a1b      	ldr	r3, [r3, #32]
 8001b66:	431a      	orrs	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b6c:	019b      	lsls	r3, r3, #6
 8001b6e:	431a      	orrs	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b74:	085b      	lsrs	r3, r3, #1
 8001b76:	3b01      	subs	r3, #1
 8001b78:	041b      	lsls	r3, r3, #16
 8001b7a:	431a      	orrs	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b80:	061b      	lsls	r3, r3, #24
 8001b82:	431a      	orrs	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b88:	071b      	lsls	r3, r3, #28
 8001b8a:	491b      	ldr	r1, [pc, #108]	@ (8001bf8 <HAL_RCC_OscConfig+0x4ac>)
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b90:	4b1b      	ldr	r3, [pc, #108]	@ (8001c00 <HAL_RCC_OscConfig+0x4b4>)
 8001b92:	2201      	movs	r2, #1
 8001b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b96:	f7fe ff93 	bl	8000ac0 <HAL_GetTick>
 8001b9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b9e:	f7fe ff8f 	bl	8000ac0 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e064      	b.n	8001c7a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bb0:	4b11      	ldr	r3, [pc, #68]	@ (8001bf8 <HAL_RCC_OscConfig+0x4ac>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d0f0      	beq.n	8001b9e <HAL_RCC_OscConfig+0x452>
 8001bbc:	e05c      	b.n	8001c78 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bbe:	4b10      	ldr	r3, [pc, #64]	@ (8001c00 <HAL_RCC_OscConfig+0x4b4>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc4:	f7fe ff7c 	bl	8000ac0 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bcc:	f7fe ff78 	bl	8000ac0 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e04d      	b.n	8001c7a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bde:	4b06      	ldr	r3, [pc, #24]	@ (8001bf8 <HAL_RCC_OscConfig+0x4ac>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1f0      	bne.n	8001bcc <HAL_RCC_OscConfig+0x480>
 8001bea:	e045      	b.n	8001c78 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d107      	bne.n	8001c04 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e040      	b.n	8001c7a <HAL_RCC_OscConfig+0x52e>
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	40007000 	.word	0x40007000
 8001c00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c04:	4b1f      	ldr	r3, [pc, #124]	@ (8001c84 <HAL_RCC_OscConfig+0x538>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d030      	beq.n	8001c74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d129      	bne.n	8001c74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d122      	bne.n	8001c74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001c34:	4013      	ands	r3, r2
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001c3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d119      	bne.n	8001c74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c4a:	085b      	lsrs	r3, r3, #1
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d10f      	bne.n	8001c74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d107      	bne.n	8001c74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d001      	beq.n	8001c78 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e000      	b.n	8001c7a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3718      	adds	r7, #24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40023800 	.word	0x40023800

08001c88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e042      	b.n	8001d20 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d106      	bne.n	8001cb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7fe fd94 	bl	80007dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2224      	movs	r2, #36	@ 0x24
 8001cb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	68da      	ldr	r2, [r3, #12]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001cca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f000 fdff 	bl	80028d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	691a      	ldr	r2, [r3, #16]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001ce0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	695a      	ldr	r2, [r3, #20]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001cf0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	68da      	ldr	r2, [r3, #12]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001d00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2220      	movs	r2, #32
 8001d0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2220      	movs	r2, #32
 8001d14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b08a      	sub	sp, #40	@ 0x28
 8001d2c:	af02      	add	r7, sp, #8
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	603b      	str	r3, [r7, #0]
 8001d34:	4613      	mov	r3, r2
 8001d36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	2b20      	cmp	r3, #32
 8001d46:	d175      	bne.n	8001e34 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d002      	beq.n	8001d54 <HAL_UART_Transmit+0x2c>
 8001d4e:	88fb      	ldrh	r3, [r7, #6]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d101      	bne.n	8001d58 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e06e      	b.n	8001e36 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2221      	movs	r2, #33	@ 0x21
 8001d62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d66:	f7fe feab 	bl	8000ac0 <HAL_GetTick>
 8001d6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	88fa      	ldrh	r2, [r7, #6]
 8001d70:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	88fa      	ldrh	r2, [r7, #6]
 8001d76:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d80:	d108      	bne.n	8001d94 <HAL_UART_Transmit+0x6c>
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	691b      	ldr	r3, [r3, #16]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d104      	bne.n	8001d94 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	61bb      	str	r3, [r7, #24]
 8001d92:	e003      	b.n	8001d9c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001d9c:	e02e      	b.n	8001dfc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	9300      	str	r3, [sp, #0]
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	2200      	movs	r2, #0
 8001da6:	2180      	movs	r1, #128	@ 0x80
 8001da8:	68f8      	ldr	r0, [r7, #12]
 8001daa:	f000 fb9b 	bl	80024e4 <UART_WaitOnFlagUntilTimeout>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d005      	beq.n	8001dc0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2220      	movs	r2, #32
 8001db8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e03a      	b.n	8001e36 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d10b      	bne.n	8001dde <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	881b      	ldrh	r3, [r3, #0]
 8001dca:	461a      	mov	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001dd4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	3302      	adds	r3, #2
 8001dda:	61bb      	str	r3, [r7, #24]
 8001ddc:	e007      	b.n	8001dee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	781a      	ldrb	r2, [r3, #0]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	3301      	adds	r3, #1
 8001dec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	3b01      	subs	r3, #1
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1cb      	bne.n	8001d9e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	9300      	str	r3, [sp, #0]
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	2140      	movs	r1, #64	@ 0x40
 8001e10:	68f8      	ldr	r0, [r7, #12]
 8001e12:	f000 fb67 	bl	80024e4 <UART_WaitOnFlagUntilTimeout>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d005      	beq.n	8001e28 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2220      	movs	r2, #32
 8001e20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e006      	b.n	8001e36 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2220      	movs	r2, #32
 8001e2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001e30:	2300      	movs	r3, #0
 8001e32:	e000      	b.n	8001e36 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001e34:	2302      	movs	r3, #2
  }
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3720      	adds	r7, #32
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b08a      	sub	sp, #40	@ 0x28
 8001e42:	af02      	add	r7, sp, #8
 8001e44:	60f8      	str	r0, [r7, #12]
 8001e46:	60b9      	str	r1, [r7, #8]
 8001e48:	603b      	str	r3, [r7, #0]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b20      	cmp	r3, #32
 8001e5c:	f040 8081 	bne.w	8001f62 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d002      	beq.n	8001e6c <HAL_UART_Receive+0x2e>
 8001e66:	88fb      	ldrh	r3, [r7, #6]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d101      	bne.n	8001e70 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e079      	b.n	8001f64 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2200      	movs	r2, #0
 8001e74:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2222      	movs	r2, #34	@ 0x22
 8001e7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2200      	movs	r2, #0
 8001e82:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e84:	f7fe fe1c 	bl	8000ac0 <HAL_GetTick>
 8001e88:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	88fa      	ldrh	r2, [r7, #6]
 8001e8e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	88fa      	ldrh	r2, [r7, #6]
 8001e94:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e9e:	d108      	bne.n	8001eb2 <HAL_UART_Receive+0x74>
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	691b      	ldr	r3, [r3, #16]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d104      	bne.n	8001eb2 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	61bb      	str	r3, [r7, #24]
 8001eb0:	e003      	b.n	8001eba <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001eba:	e047      	b.n	8001f4c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	9300      	str	r3, [sp, #0]
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	2120      	movs	r1, #32
 8001ec6:	68f8      	ldr	r0, [r7, #12]
 8001ec8:	f000 fb0c 	bl	80024e4 <UART_WaitOnFlagUntilTimeout>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d005      	beq.n	8001ede <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2220      	movs	r2, #32
 8001ed6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e042      	b.n	8001f64 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d10c      	bne.n	8001efe <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	3302      	adds	r3, #2
 8001efa:	61bb      	str	r3, [r7, #24]
 8001efc:	e01f      	b.n	8001f3e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f06:	d007      	beq.n	8001f18 <HAL_UART_Receive+0xda>
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d10a      	bne.n	8001f26 <HAL_UART_Receive+0xe8>
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d106      	bne.n	8001f26 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	b2da      	uxtb	r2, r3
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	701a      	strb	r2, [r3, #0]
 8001f24:	e008      	b.n	8001f38 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001f32:	b2da      	uxtb	r2, r3
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	3b01      	subs	r3, #1
 8001f46:	b29a      	uxth	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1b2      	bne.n	8001ebc <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2220      	movs	r2, #32
 8001f5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	e000      	b.n	8001f64 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8001f62:	2302      	movs	r3, #2
  }
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3720      	adds	r7, #32
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b0ba      	sub	sp, #232	@ 0xe8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001f92:	2300      	movs	r3, #0
 8001f94:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001fa2:	f003 030f 	and.w	r3, r3, #15
 8001fa6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001faa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d10f      	bne.n	8001fd2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001fb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001fb6:	f003 0320 	and.w	r3, r3, #32
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d009      	beq.n	8001fd2 <HAL_UART_IRQHandler+0x66>
 8001fbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001fc2:	f003 0320 	and.w	r3, r3, #32
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d003      	beq.n	8001fd2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 fbc2 	bl	8002754 <UART_Receive_IT>
      return;
 8001fd0:	e25b      	b.n	800248a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001fd2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f000 80de 	beq.w	8002198 <HAL_UART_IRQHandler+0x22c>
 8001fdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d106      	bne.n	8001ff6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001fe8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001fec:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f000 80d1 	beq.w	8002198 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d00b      	beq.n	800201a <HAL_UART_IRQHandler+0xae>
 8002002:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002006:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800200a:	2b00      	cmp	r3, #0
 800200c:	d005      	beq.n	800201a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002012:	f043 0201 	orr.w	r2, r3, #1
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800201a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800201e:	f003 0304 	and.w	r3, r3, #4
 8002022:	2b00      	cmp	r3, #0
 8002024:	d00b      	beq.n	800203e <HAL_UART_IRQHandler+0xd2>
 8002026:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b00      	cmp	r3, #0
 8002030:	d005      	beq.n	800203e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002036:	f043 0202 	orr.w	r2, r3, #2
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800203e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d00b      	beq.n	8002062 <HAL_UART_IRQHandler+0xf6>
 800204a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b00      	cmp	r3, #0
 8002054:	d005      	beq.n	8002062 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800205a:	f043 0204 	orr.w	r2, r3, #4
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002066:	f003 0308 	and.w	r3, r3, #8
 800206a:	2b00      	cmp	r3, #0
 800206c:	d011      	beq.n	8002092 <HAL_UART_IRQHandler+0x126>
 800206e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002072:	f003 0320 	and.w	r3, r3, #32
 8002076:	2b00      	cmp	r3, #0
 8002078:	d105      	bne.n	8002086 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800207a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b00      	cmp	r3, #0
 8002084:	d005      	beq.n	8002092 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800208a:	f043 0208 	orr.w	r2, r3, #8
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002096:	2b00      	cmp	r3, #0
 8002098:	f000 81f2 	beq.w	8002480 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800209c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020a0:	f003 0320 	and.w	r3, r3, #32
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d008      	beq.n	80020ba <HAL_UART_IRQHandler+0x14e>
 80020a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80020ac:	f003 0320 	and.w	r3, r3, #32
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d002      	beq.n	80020ba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f000 fb4d 	bl	8002754 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	695b      	ldr	r3, [r3, #20]
 80020c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020c4:	2b40      	cmp	r3, #64	@ 0x40
 80020c6:	bf0c      	ite	eq
 80020c8:	2301      	moveq	r3, #1
 80020ca:	2300      	movne	r3, #0
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020d6:	f003 0308 	and.w	r3, r3, #8
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d103      	bne.n	80020e6 <HAL_UART_IRQHandler+0x17a>
 80020de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d04f      	beq.n	8002186 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 fa55 	bl	8002596 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020f6:	2b40      	cmp	r3, #64	@ 0x40
 80020f8:	d141      	bne.n	800217e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	3314      	adds	r3, #20
 8002100:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002104:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002108:	e853 3f00 	ldrex	r3, [r3]
 800210c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002110:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002114:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002118:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	3314      	adds	r3, #20
 8002122:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002126:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800212a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800212e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002132:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002136:	e841 2300 	strex	r3, r2, [r1]
 800213a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800213e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d1d9      	bne.n	80020fa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800214a:	2b00      	cmp	r3, #0
 800214c:	d013      	beq.n	8002176 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002152:	4a7e      	ldr	r2, [pc, #504]	@ (800234c <HAL_UART_IRQHandler+0x3e0>)
 8002154:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800215a:	4618      	mov	r0, r3
 800215c:	f7fe fe61 	bl	8000e22 <HAL_DMA_Abort_IT>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d016      	beq.n	8002194 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800216a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002170:	4610      	mov	r0, r2
 8002172:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002174:	e00e      	b.n	8002194 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 f99e 	bl	80024b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800217c:	e00a      	b.n	8002194 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 f99a 	bl	80024b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002184:	e006      	b.n	8002194 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 f996 	bl	80024b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002192:	e175      	b.n	8002480 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002194:	bf00      	nop
    return;
 8002196:	e173      	b.n	8002480 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219c:	2b01      	cmp	r3, #1
 800219e:	f040 814f 	bne.w	8002440 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80021a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80021a6:	f003 0310 	and.w	r3, r3, #16
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f000 8148 	beq.w	8002440 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80021b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80021b4:	f003 0310 	and.w	r3, r3, #16
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f000 8141 	beq.w	8002440 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80021be:	2300      	movs	r3, #0
 80021c0:	60bb      	str	r3, [r7, #8]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	60bb      	str	r3, [r7, #8]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	60bb      	str	r3, [r7, #8]
 80021d2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	695b      	ldr	r3, [r3, #20]
 80021da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021de:	2b40      	cmp	r3, #64	@ 0x40
 80021e0:	f040 80b6 	bne.w	8002350 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80021f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 8145 	beq.w	8002484 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80021fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002202:	429a      	cmp	r2, r3
 8002204:	f080 813e 	bcs.w	8002484 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800220e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002214:	69db      	ldr	r3, [r3, #28]
 8002216:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800221a:	f000 8088 	beq.w	800232e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	330c      	adds	r3, #12
 8002224:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002228:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800222c:	e853 3f00 	ldrex	r3, [r3]
 8002230:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002234:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002238:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800223c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	330c      	adds	r3, #12
 8002246:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800224a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800224e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002252:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002256:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800225a:	e841 2300 	strex	r3, r2, [r1]
 800225e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002262:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1d9      	bne.n	800221e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	3314      	adds	r3, #20
 8002270:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002272:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002274:	e853 3f00 	ldrex	r3, [r3]
 8002278:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800227a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800227c:	f023 0301 	bic.w	r3, r3, #1
 8002280:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	3314      	adds	r3, #20
 800228a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800228e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002292:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002294:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002296:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800229a:	e841 2300 	strex	r3, r2, [r1]
 800229e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80022a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1e1      	bne.n	800226a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	3314      	adds	r3, #20
 80022ac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80022b0:	e853 3f00 	ldrex	r3, [r3]
 80022b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80022b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80022bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	3314      	adds	r3, #20
 80022c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80022ca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80022cc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022ce:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80022d0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80022d2:	e841 2300 	strex	r3, r2, [r1]
 80022d6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80022d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1e3      	bne.n	80022a6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2220      	movs	r2, #32
 80022e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	330c      	adds	r3, #12
 80022f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80022f6:	e853 3f00 	ldrex	r3, [r3]
 80022fa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80022fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022fe:	f023 0310 	bic.w	r3, r3, #16
 8002302:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	330c      	adds	r3, #12
 800230c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002310:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002312:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002314:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002316:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002318:	e841 2300 	strex	r3, r2, [r1]
 800231c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800231e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002320:	2b00      	cmp	r3, #0
 8002322:	d1e3      	bne.n	80022ec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002328:	4618      	mov	r0, r3
 800232a:	f7fe fd0a 	bl	8000d42 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2202      	movs	r2, #2
 8002332:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800233c:	b29b      	uxth	r3, r3
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	b29b      	uxth	r3, r3
 8002342:	4619      	mov	r1, r3
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f000 f8c1 	bl	80024cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800234a:	e09b      	b.n	8002484 <HAL_UART_IRQHandler+0x518>
 800234c:	0800265d 	.word	0x0800265d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002358:	b29b      	uxth	r3, r3
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002364:	b29b      	uxth	r3, r3
 8002366:	2b00      	cmp	r3, #0
 8002368:	f000 808e 	beq.w	8002488 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800236c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002370:	2b00      	cmp	r3, #0
 8002372:	f000 8089 	beq.w	8002488 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	330c      	adds	r3, #12
 800237c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800237e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002380:	e853 3f00 	ldrex	r3, [r3]
 8002384:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002388:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800238c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	330c      	adds	r3, #12
 8002396:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800239a:	647a      	str	r2, [r7, #68]	@ 0x44
 800239c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800239e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80023a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80023a2:	e841 2300 	strex	r3, r2, [r1]
 80023a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80023a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1e3      	bne.n	8002376 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	3314      	adds	r3, #20
 80023b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b8:	e853 3f00 	ldrex	r3, [r3]
 80023bc:	623b      	str	r3, [r7, #32]
   return(result);
 80023be:	6a3b      	ldr	r3, [r7, #32]
 80023c0:	f023 0301 	bic.w	r3, r3, #1
 80023c4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	3314      	adds	r3, #20
 80023ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80023d2:	633a      	str	r2, [r7, #48]	@ 0x30
 80023d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80023d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023da:	e841 2300 	strex	r3, r2, [r1]
 80023de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80023e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1e3      	bne.n	80023ae <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2220      	movs	r2, #32
 80023ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	330c      	adds	r3, #12
 80023fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	e853 3f00 	ldrex	r3, [r3]
 8002402:	60fb      	str	r3, [r7, #12]
   return(result);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f023 0310 	bic.w	r3, r3, #16
 800240a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	330c      	adds	r3, #12
 8002414:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002418:	61fa      	str	r2, [r7, #28]
 800241a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800241c:	69b9      	ldr	r1, [r7, #24]
 800241e:	69fa      	ldr	r2, [r7, #28]
 8002420:	e841 2300 	strex	r3, r2, [r1]
 8002424:	617b      	str	r3, [r7, #20]
   return(result);
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d1e3      	bne.n	80023f4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2202      	movs	r2, #2
 8002430:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002432:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002436:	4619      	mov	r1, r3
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f000 f847 	bl	80024cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800243e:	e023      	b.n	8002488 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002444:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002448:	2b00      	cmp	r3, #0
 800244a:	d009      	beq.n	8002460 <HAL_UART_IRQHandler+0x4f4>
 800244c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002450:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002454:	2b00      	cmp	r3, #0
 8002456:	d003      	beq.n	8002460 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 f913 	bl	8002684 <UART_Transmit_IT>
    return;
 800245e:	e014      	b.n	800248a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002460:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002464:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002468:	2b00      	cmp	r3, #0
 800246a:	d00e      	beq.n	800248a <HAL_UART_IRQHandler+0x51e>
 800246c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002470:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002474:	2b00      	cmp	r3, #0
 8002476:	d008      	beq.n	800248a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f000 f953 	bl	8002724 <UART_EndTransmit_IT>
    return;
 800247e:	e004      	b.n	800248a <HAL_UART_IRQHandler+0x51e>
    return;
 8002480:	bf00      	nop
 8002482:	e002      	b.n	800248a <HAL_UART_IRQHandler+0x51e>
      return;
 8002484:	bf00      	nop
 8002486:	e000      	b.n	800248a <HAL_UART_IRQHandler+0x51e>
      return;
 8002488:	bf00      	nop
  }
}
 800248a:	37e8      	adds	r7, #232	@ 0xe8
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	460b      	mov	r3, r1
 80024d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80024d8:	bf00      	nop
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	603b      	str	r3, [r7, #0]
 80024f0:	4613      	mov	r3, r2
 80024f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024f4:	e03b      	b.n	800256e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024f6:	6a3b      	ldr	r3, [r7, #32]
 80024f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024fc:	d037      	beq.n	800256e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024fe:	f7fe fadf 	bl	8000ac0 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	6a3a      	ldr	r2, [r7, #32]
 800250a:	429a      	cmp	r2, r3
 800250c:	d302      	bcc.n	8002514 <UART_WaitOnFlagUntilTimeout+0x30>
 800250e:	6a3b      	ldr	r3, [r7, #32]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d101      	bne.n	8002518 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e03a      	b.n	800258e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	f003 0304 	and.w	r3, r3, #4
 8002522:	2b00      	cmp	r3, #0
 8002524:	d023      	beq.n	800256e <UART_WaitOnFlagUntilTimeout+0x8a>
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	2b80      	cmp	r3, #128	@ 0x80
 800252a:	d020      	beq.n	800256e <UART_WaitOnFlagUntilTimeout+0x8a>
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	2b40      	cmp	r3, #64	@ 0x40
 8002530:	d01d      	beq.n	800256e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0308 	and.w	r3, r3, #8
 800253c:	2b08      	cmp	r3, #8
 800253e:	d116      	bne.n	800256e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002540:	2300      	movs	r3, #0
 8002542:	617b      	str	r3, [r7, #20]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	617b      	str	r3, [r7, #20]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	617b      	str	r3, [r7, #20]
 8002554:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002556:	68f8      	ldr	r0, [r7, #12]
 8002558:	f000 f81d 	bl	8002596 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2208      	movs	r2, #8
 8002560:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e00f      	b.n	800258e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	4013      	ands	r3, r2
 8002578:	68ba      	ldr	r2, [r7, #8]
 800257a:	429a      	cmp	r2, r3
 800257c:	bf0c      	ite	eq
 800257e:	2301      	moveq	r3, #1
 8002580:	2300      	movne	r3, #0
 8002582:	b2db      	uxtb	r3, r3
 8002584:	461a      	mov	r2, r3
 8002586:	79fb      	ldrb	r3, [r7, #7]
 8002588:	429a      	cmp	r2, r3
 800258a:	d0b4      	beq.n	80024f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3718      	adds	r7, #24
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002596:	b480      	push	{r7}
 8002598:	b095      	sub	sp, #84	@ 0x54
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	330c      	adds	r3, #12
 80025a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025a8:	e853 3f00 	ldrex	r3, [r3]
 80025ac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80025ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80025b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	330c      	adds	r3, #12
 80025bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80025be:	643a      	str	r2, [r7, #64]	@ 0x40
 80025c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80025c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80025c6:	e841 2300 	strex	r3, r2, [r1]
 80025ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80025cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1e5      	bne.n	800259e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	3314      	adds	r3, #20
 80025d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025da:	6a3b      	ldr	r3, [r7, #32]
 80025dc:	e853 3f00 	ldrex	r3, [r3]
 80025e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	f023 0301 	bic.w	r3, r3, #1
 80025e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	3314      	adds	r3, #20
 80025f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80025f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80025f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80025f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025fa:	e841 2300 	strex	r3, r2, [r1]
 80025fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1e5      	bne.n	80025d2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260a:	2b01      	cmp	r3, #1
 800260c:	d119      	bne.n	8002642 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	330c      	adds	r3, #12
 8002614:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	e853 3f00 	ldrex	r3, [r3]
 800261c:	60bb      	str	r3, [r7, #8]
   return(result);
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	f023 0310 	bic.w	r3, r3, #16
 8002624:	647b      	str	r3, [r7, #68]	@ 0x44
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	330c      	adds	r3, #12
 800262c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800262e:	61ba      	str	r2, [r7, #24]
 8002630:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002632:	6979      	ldr	r1, [r7, #20]
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	e841 2300 	strex	r3, r2, [r1]
 800263a:	613b      	str	r3, [r7, #16]
   return(result);
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1e5      	bne.n	800260e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2220      	movs	r2, #32
 8002646:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002650:	bf00      	nop
 8002652:	3754      	adds	r7, #84	@ 0x54
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002668:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f7ff ff1e 	bl	80024b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800267c:	bf00      	nop
 800267e:	3710      	adds	r7, #16
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002692:	b2db      	uxtb	r3, r3
 8002694:	2b21      	cmp	r3, #33	@ 0x21
 8002696:	d13e      	bne.n	8002716 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026a0:	d114      	bne.n	80026cc <UART_Transmit_IT+0x48>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d110      	bne.n	80026cc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	881b      	ldrh	r3, [r3, #0]
 80026b4:	461a      	mov	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026be:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a1b      	ldr	r3, [r3, #32]
 80026c4:	1c9a      	adds	r2, r3, #2
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	621a      	str	r2, [r3, #32]
 80026ca:	e008      	b.n	80026de <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a1b      	ldr	r3, [r3, #32]
 80026d0:	1c59      	adds	r1, r3, #1
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	6211      	str	r1, [r2, #32]
 80026d6:	781a      	ldrb	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	3b01      	subs	r3, #1
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	4619      	mov	r1, r3
 80026ec:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d10f      	bne.n	8002712 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68da      	ldr	r2, [r3, #12]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002700:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68da      	ldr	r2, [r3, #12]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002710:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002712:	2300      	movs	r3, #0
 8002714:	e000      	b.n	8002718 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002716:	2302      	movs	r3, #2
  }
}
 8002718:	4618      	mov	r0, r3
 800271a:	3714      	adds	r7, #20
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68da      	ldr	r2, [r3, #12]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800273a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2220      	movs	r2, #32
 8002740:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f7ff fea3 	bl	8002490 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	3708      	adds	r7, #8
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b08c      	sub	sp, #48	@ 0x30
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002762:	b2db      	uxtb	r3, r3
 8002764:	2b22      	cmp	r3, #34	@ 0x22
 8002766:	f040 80ae 	bne.w	80028c6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002772:	d117      	bne.n	80027a4 <UART_Receive_IT+0x50>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d113      	bne.n	80027a4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800277c:	2300      	movs	r3, #0
 800277e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002784:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	b29b      	uxth	r3, r3
 800278e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002792:	b29a      	uxth	r2, r3
 8002794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002796:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800279c:	1c9a      	adds	r2, r3, #2
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	629a      	str	r2, [r3, #40]	@ 0x28
 80027a2:	e026      	b.n	80027f2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80027aa:	2300      	movs	r3, #0
 80027ac:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027b6:	d007      	beq.n	80027c8 <UART_Receive_IT+0x74>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d10a      	bne.n	80027d6 <UART_Receive_IT+0x82>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d106      	bne.n	80027d6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	b2da      	uxtb	r2, r3
 80027d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027d2:	701a      	strb	r2, [r3, #0]
 80027d4:	e008      	b.n	80027e8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80027e2:	b2da      	uxtb	r2, r3
 80027e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027e6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ec:	1c5a      	adds	r2, r3, #1
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	3b01      	subs	r3, #1
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	4619      	mov	r1, r3
 8002800:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002802:	2b00      	cmp	r3, #0
 8002804:	d15d      	bne.n	80028c2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68da      	ldr	r2, [r3, #12]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f022 0220 	bic.w	r2, r2, #32
 8002814:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68da      	ldr	r2, [r3, #12]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002824:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	695a      	ldr	r2, [r3, #20]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 0201 	bic.w	r2, r2, #1
 8002834:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2220      	movs	r2, #32
 800283a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002848:	2b01      	cmp	r3, #1
 800284a:	d135      	bne.n	80028b8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	330c      	adds	r3, #12
 8002858:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	e853 3f00 	ldrex	r3, [r3]
 8002860:	613b      	str	r3, [r7, #16]
   return(result);
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	f023 0310 	bic.w	r3, r3, #16
 8002868:	627b      	str	r3, [r7, #36]	@ 0x24
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	330c      	adds	r3, #12
 8002870:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002872:	623a      	str	r2, [r7, #32]
 8002874:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002876:	69f9      	ldr	r1, [r7, #28]
 8002878:	6a3a      	ldr	r2, [r7, #32]
 800287a:	e841 2300 	strex	r3, r2, [r1]
 800287e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1e5      	bne.n	8002852 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0310 	and.w	r3, r3, #16
 8002890:	2b10      	cmp	r3, #16
 8002892:	d10a      	bne.n	80028aa <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002894:	2300      	movs	r3, #0
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	60fb      	str	r3, [r7, #12]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80028ae:	4619      	mov	r1, r3
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f7ff fe0b 	bl	80024cc <HAL_UARTEx_RxEventCallback>
 80028b6:	e002      	b.n	80028be <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f7ff fdf3 	bl	80024a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80028be:	2300      	movs	r3, #0
 80028c0:	e002      	b.n	80028c8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80028c2:	2300      	movs	r3, #0
 80028c4:	e000      	b.n	80028c8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80028c6:	2302      	movs	r3, #2
  }
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3730      	adds	r7, #48	@ 0x30
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028d4:	b0c0      	sub	sp, #256	@ 0x100
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80028e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028ec:	68d9      	ldr	r1, [r3, #12]
 80028ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	ea40 0301 	orr.w	r3, r0, r1
 80028f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80028fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028fe:	689a      	ldr	r2, [r3, #8]
 8002900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	431a      	orrs	r2, r3
 8002908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	431a      	orrs	r2, r3
 8002910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	4313      	orrs	r3, r2
 8002918:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800291c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002928:	f021 010c 	bic.w	r1, r1, #12
 800292c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002936:	430b      	orrs	r3, r1
 8002938:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800293a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800294a:	6999      	ldr	r1, [r3, #24]
 800294c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	ea40 0301 	orr.w	r3, r0, r1
 8002956:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	4b8f      	ldr	r3, [pc, #572]	@ (8002b9c <UART_SetConfig+0x2cc>)
 8002960:	429a      	cmp	r2, r3
 8002962:	d005      	beq.n	8002970 <UART_SetConfig+0xa0>
 8002964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	4b8d      	ldr	r3, [pc, #564]	@ (8002ba0 <UART_SetConfig+0x2d0>)
 800296c:	429a      	cmp	r2, r3
 800296e:	d104      	bne.n	800297a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002970:	f7fe fd2e 	bl	80013d0 <HAL_RCC_GetPCLK2Freq>
 8002974:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002978:	e003      	b.n	8002982 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800297a:	f7fe fd15 	bl	80013a8 <HAL_RCC_GetPCLK1Freq>
 800297e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002986:	69db      	ldr	r3, [r3, #28]
 8002988:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800298c:	f040 810c 	bne.w	8002ba8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002990:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002994:	2200      	movs	r2, #0
 8002996:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800299a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800299e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80029a2:	4622      	mov	r2, r4
 80029a4:	462b      	mov	r3, r5
 80029a6:	1891      	adds	r1, r2, r2
 80029a8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80029aa:	415b      	adcs	r3, r3
 80029ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80029ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80029b2:	4621      	mov	r1, r4
 80029b4:	eb12 0801 	adds.w	r8, r2, r1
 80029b8:	4629      	mov	r1, r5
 80029ba:	eb43 0901 	adc.w	r9, r3, r1
 80029be:	f04f 0200 	mov.w	r2, #0
 80029c2:	f04f 0300 	mov.w	r3, #0
 80029c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029d2:	4690      	mov	r8, r2
 80029d4:	4699      	mov	r9, r3
 80029d6:	4623      	mov	r3, r4
 80029d8:	eb18 0303 	adds.w	r3, r8, r3
 80029dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80029e0:	462b      	mov	r3, r5
 80029e2:	eb49 0303 	adc.w	r3, r9, r3
 80029e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80029ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80029f6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80029fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80029fe:	460b      	mov	r3, r1
 8002a00:	18db      	adds	r3, r3, r3
 8002a02:	653b      	str	r3, [r7, #80]	@ 0x50
 8002a04:	4613      	mov	r3, r2
 8002a06:	eb42 0303 	adc.w	r3, r2, r3
 8002a0a:	657b      	str	r3, [r7, #84]	@ 0x54
 8002a0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002a10:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002a14:	f7fd fbf6 	bl	8000204 <__aeabi_uldivmod>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	4b61      	ldr	r3, [pc, #388]	@ (8002ba4 <UART_SetConfig+0x2d4>)
 8002a1e:	fba3 2302 	umull	r2, r3, r3, r2
 8002a22:	095b      	lsrs	r3, r3, #5
 8002a24:	011c      	lsls	r4, r3, #4
 8002a26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002a30:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002a34:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002a38:	4642      	mov	r2, r8
 8002a3a:	464b      	mov	r3, r9
 8002a3c:	1891      	adds	r1, r2, r2
 8002a3e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002a40:	415b      	adcs	r3, r3
 8002a42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a44:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002a48:	4641      	mov	r1, r8
 8002a4a:	eb12 0a01 	adds.w	sl, r2, r1
 8002a4e:	4649      	mov	r1, r9
 8002a50:	eb43 0b01 	adc.w	fp, r3, r1
 8002a54:	f04f 0200 	mov.w	r2, #0
 8002a58:	f04f 0300 	mov.w	r3, #0
 8002a5c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a60:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a68:	4692      	mov	sl, r2
 8002a6a:	469b      	mov	fp, r3
 8002a6c:	4643      	mov	r3, r8
 8002a6e:	eb1a 0303 	adds.w	r3, sl, r3
 8002a72:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002a76:	464b      	mov	r3, r9
 8002a78:	eb4b 0303 	adc.w	r3, fp, r3
 8002a7c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002a8c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002a90:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002a94:	460b      	mov	r3, r1
 8002a96:	18db      	adds	r3, r3, r3
 8002a98:	643b      	str	r3, [r7, #64]	@ 0x40
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	eb42 0303 	adc.w	r3, r2, r3
 8002aa0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002aa2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002aa6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002aaa:	f7fd fbab 	bl	8000204 <__aeabi_uldivmod>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	4611      	mov	r1, r2
 8002ab4:	4b3b      	ldr	r3, [pc, #236]	@ (8002ba4 <UART_SetConfig+0x2d4>)
 8002ab6:	fba3 2301 	umull	r2, r3, r3, r1
 8002aba:	095b      	lsrs	r3, r3, #5
 8002abc:	2264      	movs	r2, #100	@ 0x64
 8002abe:	fb02 f303 	mul.w	r3, r2, r3
 8002ac2:	1acb      	subs	r3, r1, r3
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002aca:	4b36      	ldr	r3, [pc, #216]	@ (8002ba4 <UART_SetConfig+0x2d4>)
 8002acc:	fba3 2302 	umull	r2, r3, r3, r2
 8002ad0:	095b      	lsrs	r3, r3, #5
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002ad8:	441c      	add	r4, r3
 8002ada:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002ae4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002ae8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002aec:	4642      	mov	r2, r8
 8002aee:	464b      	mov	r3, r9
 8002af0:	1891      	adds	r1, r2, r2
 8002af2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002af4:	415b      	adcs	r3, r3
 8002af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002af8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002afc:	4641      	mov	r1, r8
 8002afe:	1851      	adds	r1, r2, r1
 8002b00:	6339      	str	r1, [r7, #48]	@ 0x30
 8002b02:	4649      	mov	r1, r9
 8002b04:	414b      	adcs	r3, r1
 8002b06:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b08:	f04f 0200 	mov.w	r2, #0
 8002b0c:	f04f 0300 	mov.w	r3, #0
 8002b10:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002b14:	4659      	mov	r1, fp
 8002b16:	00cb      	lsls	r3, r1, #3
 8002b18:	4651      	mov	r1, sl
 8002b1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b1e:	4651      	mov	r1, sl
 8002b20:	00ca      	lsls	r2, r1, #3
 8002b22:	4610      	mov	r0, r2
 8002b24:	4619      	mov	r1, r3
 8002b26:	4603      	mov	r3, r0
 8002b28:	4642      	mov	r2, r8
 8002b2a:	189b      	adds	r3, r3, r2
 8002b2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002b30:	464b      	mov	r3, r9
 8002b32:	460a      	mov	r2, r1
 8002b34:	eb42 0303 	adc.w	r3, r2, r3
 8002b38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002b48:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002b4c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002b50:	460b      	mov	r3, r1
 8002b52:	18db      	adds	r3, r3, r3
 8002b54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b56:	4613      	mov	r3, r2
 8002b58:	eb42 0303 	adc.w	r3, r2, r3
 8002b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002b62:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002b66:	f7fd fb4d 	bl	8000204 <__aeabi_uldivmod>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8002ba4 <UART_SetConfig+0x2d4>)
 8002b70:	fba3 1302 	umull	r1, r3, r3, r2
 8002b74:	095b      	lsrs	r3, r3, #5
 8002b76:	2164      	movs	r1, #100	@ 0x64
 8002b78:	fb01 f303 	mul.w	r3, r1, r3
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	3332      	adds	r3, #50	@ 0x32
 8002b82:	4a08      	ldr	r2, [pc, #32]	@ (8002ba4 <UART_SetConfig+0x2d4>)
 8002b84:	fba2 2303 	umull	r2, r3, r2, r3
 8002b88:	095b      	lsrs	r3, r3, #5
 8002b8a:	f003 0207 	and.w	r2, r3, #7
 8002b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4422      	add	r2, r4
 8002b96:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002b98:	e106      	b.n	8002da8 <UART_SetConfig+0x4d8>
 8002b9a:	bf00      	nop
 8002b9c:	40011000 	.word	0x40011000
 8002ba0:	40011400 	.word	0x40011400
 8002ba4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ba8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002bac:	2200      	movs	r2, #0
 8002bae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002bb2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002bb6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002bba:	4642      	mov	r2, r8
 8002bbc:	464b      	mov	r3, r9
 8002bbe:	1891      	adds	r1, r2, r2
 8002bc0:	6239      	str	r1, [r7, #32]
 8002bc2:	415b      	adcs	r3, r3
 8002bc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bc6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002bca:	4641      	mov	r1, r8
 8002bcc:	1854      	adds	r4, r2, r1
 8002bce:	4649      	mov	r1, r9
 8002bd0:	eb43 0501 	adc.w	r5, r3, r1
 8002bd4:	f04f 0200 	mov.w	r2, #0
 8002bd8:	f04f 0300 	mov.w	r3, #0
 8002bdc:	00eb      	lsls	r3, r5, #3
 8002bde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002be2:	00e2      	lsls	r2, r4, #3
 8002be4:	4614      	mov	r4, r2
 8002be6:	461d      	mov	r5, r3
 8002be8:	4643      	mov	r3, r8
 8002bea:	18e3      	adds	r3, r4, r3
 8002bec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002bf0:	464b      	mov	r3, r9
 8002bf2:	eb45 0303 	adc.w	r3, r5, r3
 8002bf6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002c06:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002c0a:	f04f 0200 	mov.w	r2, #0
 8002c0e:	f04f 0300 	mov.w	r3, #0
 8002c12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002c16:	4629      	mov	r1, r5
 8002c18:	008b      	lsls	r3, r1, #2
 8002c1a:	4621      	mov	r1, r4
 8002c1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c20:	4621      	mov	r1, r4
 8002c22:	008a      	lsls	r2, r1, #2
 8002c24:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002c28:	f7fd faec 	bl	8000204 <__aeabi_uldivmod>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	460b      	mov	r3, r1
 8002c30:	4b60      	ldr	r3, [pc, #384]	@ (8002db4 <UART_SetConfig+0x4e4>)
 8002c32:	fba3 2302 	umull	r2, r3, r3, r2
 8002c36:	095b      	lsrs	r3, r3, #5
 8002c38:	011c      	lsls	r4, r3, #4
 8002c3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002c44:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002c48:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002c4c:	4642      	mov	r2, r8
 8002c4e:	464b      	mov	r3, r9
 8002c50:	1891      	adds	r1, r2, r2
 8002c52:	61b9      	str	r1, [r7, #24]
 8002c54:	415b      	adcs	r3, r3
 8002c56:	61fb      	str	r3, [r7, #28]
 8002c58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c5c:	4641      	mov	r1, r8
 8002c5e:	1851      	adds	r1, r2, r1
 8002c60:	6139      	str	r1, [r7, #16]
 8002c62:	4649      	mov	r1, r9
 8002c64:	414b      	adcs	r3, r1
 8002c66:	617b      	str	r3, [r7, #20]
 8002c68:	f04f 0200 	mov.w	r2, #0
 8002c6c:	f04f 0300 	mov.w	r3, #0
 8002c70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c74:	4659      	mov	r1, fp
 8002c76:	00cb      	lsls	r3, r1, #3
 8002c78:	4651      	mov	r1, sl
 8002c7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c7e:	4651      	mov	r1, sl
 8002c80:	00ca      	lsls	r2, r1, #3
 8002c82:	4610      	mov	r0, r2
 8002c84:	4619      	mov	r1, r3
 8002c86:	4603      	mov	r3, r0
 8002c88:	4642      	mov	r2, r8
 8002c8a:	189b      	adds	r3, r3, r2
 8002c8c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002c90:	464b      	mov	r3, r9
 8002c92:	460a      	mov	r2, r1
 8002c94:	eb42 0303 	adc.w	r3, r2, r3
 8002c98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002ca6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002ca8:	f04f 0200 	mov.w	r2, #0
 8002cac:	f04f 0300 	mov.w	r3, #0
 8002cb0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002cb4:	4649      	mov	r1, r9
 8002cb6:	008b      	lsls	r3, r1, #2
 8002cb8:	4641      	mov	r1, r8
 8002cba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002cbe:	4641      	mov	r1, r8
 8002cc0:	008a      	lsls	r2, r1, #2
 8002cc2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002cc6:	f7fd fa9d 	bl	8000204 <__aeabi_uldivmod>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	460b      	mov	r3, r1
 8002cce:	4611      	mov	r1, r2
 8002cd0:	4b38      	ldr	r3, [pc, #224]	@ (8002db4 <UART_SetConfig+0x4e4>)
 8002cd2:	fba3 2301 	umull	r2, r3, r3, r1
 8002cd6:	095b      	lsrs	r3, r3, #5
 8002cd8:	2264      	movs	r2, #100	@ 0x64
 8002cda:	fb02 f303 	mul.w	r3, r2, r3
 8002cde:	1acb      	subs	r3, r1, r3
 8002ce0:	011b      	lsls	r3, r3, #4
 8002ce2:	3332      	adds	r3, #50	@ 0x32
 8002ce4:	4a33      	ldr	r2, [pc, #204]	@ (8002db4 <UART_SetConfig+0x4e4>)
 8002ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cea:	095b      	lsrs	r3, r3, #5
 8002cec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002cf0:	441c      	add	r4, r3
 8002cf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	673b      	str	r3, [r7, #112]	@ 0x70
 8002cfa:	677a      	str	r2, [r7, #116]	@ 0x74
 8002cfc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002d00:	4642      	mov	r2, r8
 8002d02:	464b      	mov	r3, r9
 8002d04:	1891      	adds	r1, r2, r2
 8002d06:	60b9      	str	r1, [r7, #8]
 8002d08:	415b      	adcs	r3, r3
 8002d0a:	60fb      	str	r3, [r7, #12]
 8002d0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d10:	4641      	mov	r1, r8
 8002d12:	1851      	adds	r1, r2, r1
 8002d14:	6039      	str	r1, [r7, #0]
 8002d16:	4649      	mov	r1, r9
 8002d18:	414b      	adcs	r3, r1
 8002d1a:	607b      	str	r3, [r7, #4]
 8002d1c:	f04f 0200 	mov.w	r2, #0
 8002d20:	f04f 0300 	mov.w	r3, #0
 8002d24:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002d28:	4659      	mov	r1, fp
 8002d2a:	00cb      	lsls	r3, r1, #3
 8002d2c:	4651      	mov	r1, sl
 8002d2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d32:	4651      	mov	r1, sl
 8002d34:	00ca      	lsls	r2, r1, #3
 8002d36:	4610      	mov	r0, r2
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	4642      	mov	r2, r8
 8002d3e:	189b      	adds	r3, r3, r2
 8002d40:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002d42:	464b      	mov	r3, r9
 8002d44:	460a      	mov	r2, r1
 8002d46:	eb42 0303 	adc.w	r3, r2, r3
 8002d4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d56:	667a      	str	r2, [r7, #100]	@ 0x64
 8002d58:	f04f 0200 	mov.w	r2, #0
 8002d5c:	f04f 0300 	mov.w	r3, #0
 8002d60:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002d64:	4649      	mov	r1, r9
 8002d66:	008b      	lsls	r3, r1, #2
 8002d68:	4641      	mov	r1, r8
 8002d6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d6e:	4641      	mov	r1, r8
 8002d70:	008a      	lsls	r2, r1, #2
 8002d72:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002d76:	f7fd fa45 	bl	8000204 <__aeabi_uldivmod>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8002db4 <UART_SetConfig+0x4e4>)
 8002d80:	fba3 1302 	umull	r1, r3, r3, r2
 8002d84:	095b      	lsrs	r3, r3, #5
 8002d86:	2164      	movs	r1, #100	@ 0x64
 8002d88:	fb01 f303 	mul.w	r3, r1, r3
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	011b      	lsls	r3, r3, #4
 8002d90:	3332      	adds	r3, #50	@ 0x32
 8002d92:	4a08      	ldr	r2, [pc, #32]	@ (8002db4 <UART_SetConfig+0x4e4>)
 8002d94:	fba2 2303 	umull	r2, r3, r2, r3
 8002d98:	095b      	lsrs	r3, r3, #5
 8002d9a:	f003 020f 	and.w	r2, r3, #15
 8002d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4422      	add	r2, r4
 8002da6:	609a      	str	r2, [r3, #8]
}
 8002da8:	bf00      	nop
 8002daa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002dae:	46bd      	mov	sp, r7
 8002db0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002db4:	51eb851f 	.word	0x51eb851f

08002db8 <memset>:
 8002db8:	4402      	add	r2, r0
 8002dba:	4603      	mov	r3, r0
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d100      	bne.n	8002dc2 <memset+0xa>
 8002dc0:	4770      	bx	lr
 8002dc2:	f803 1b01 	strb.w	r1, [r3], #1
 8002dc6:	e7f9      	b.n	8002dbc <memset+0x4>

08002dc8 <__libc_init_array>:
 8002dc8:	b570      	push	{r4, r5, r6, lr}
 8002dca:	4d0d      	ldr	r5, [pc, #52]	@ (8002e00 <__libc_init_array+0x38>)
 8002dcc:	4c0d      	ldr	r4, [pc, #52]	@ (8002e04 <__libc_init_array+0x3c>)
 8002dce:	1b64      	subs	r4, r4, r5
 8002dd0:	10a4      	asrs	r4, r4, #2
 8002dd2:	2600      	movs	r6, #0
 8002dd4:	42a6      	cmp	r6, r4
 8002dd6:	d109      	bne.n	8002dec <__libc_init_array+0x24>
 8002dd8:	4d0b      	ldr	r5, [pc, #44]	@ (8002e08 <__libc_init_array+0x40>)
 8002dda:	4c0c      	ldr	r4, [pc, #48]	@ (8002e0c <__libc_init_array+0x44>)
 8002ddc:	f000 f818 	bl	8002e10 <_init>
 8002de0:	1b64      	subs	r4, r4, r5
 8002de2:	10a4      	asrs	r4, r4, #2
 8002de4:	2600      	movs	r6, #0
 8002de6:	42a6      	cmp	r6, r4
 8002de8:	d105      	bne.n	8002df6 <__libc_init_array+0x2e>
 8002dea:	bd70      	pop	{r4, r5, r6, pc}
 8002dec:	f855 3b04 	ldr.w	r3, [r5], #4
 8002df0:	4798      	blx	r3
 8002df2:	3601      	adds	r6, #1
 8002df4:	e7ee      	b.n	8002dd4 <__libc_init_array+0xc>
 8002df6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dfa:	4798      	blx	r3
 8002dfc:	3601      	adds	r6, #1
 8002dfe:	e7f2      	b.n	8002de6 <__libc_init_array+0x1e>
 8002e00:	08002ebc 	.word	0x08002ebc
 8002e04:	08002ebc 	.word	0x08002ebc
 8002e08:	08002ebc 	.word	0x08002ebc
 8002e0c:	08002ec0 	.word	0x08002ec0

08002e10 <_init>:
 8002e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e12:	bf00      	nop
 8002e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e16:	bc08      	pop	{r3}
 8002e18:	469e      	mov	lr, r3
 8002e1a:	4770      	bx	lr

08002e1c <_fini>:
 8002e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e1e:	bf00      	nop
 8002e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e22:	bc08      	pop	{r3}
 8002e24:	469e      	mov	lr, r3
 8002e26:	4770      	bx	lr
